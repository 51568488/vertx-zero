/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IResBankAccount extends Serializable {

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.PK_ID</code>. uniqueId,PK_ID
     */
    public IResBankAccount setPkId(Long value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.PK_ID</code>. uniqueId,PK_ID
     */
    public Long getPkId();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.S_CODE</code>. code,S_CODE
     */
    public IResBankAccount setSCode(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.S_ACC_NUM</code>. acc,S_ACC_NUM
     */
    public IResBankAccount setSAccNum(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.S_ACC_NUM</code>. acc,S_ACC_NUM
     */
    public String getSAccNum();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.S_SANITIZED_ACC_NUMBER</code>. sacc,S_SANITIZED_ACC_NUMBER
     */
    public IResBankAccount setSSanitizedAccNumber(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.S_SANITIZED_ACC_NUMBER</code>. sacc,S_SANITIZED_ACC_NUMBER
     */
    public String getSSanitizedAccNumber();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.J_CONFIG</code>. config,J_CONFIG
     */
    public IResBankAccount setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.I_ORDER</code>. order,I_ORDER
     */
    public IResBankAccount setIOrder(Integer value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.I_ORDER</code>. order,I_ORDER
     */
    public Integer getIOrder();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.RLT_TYPE</code>. type,RLT_TYPE
     */
    public IResBankAccount setRltType(Long value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.RLT_TYPE</code>. type,RLT_TYPE
     */
    public Long getRltType();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.R_BANK_ID</code>. bankId,R_BANK_ID
     */
    public IResBankAccount setRBankId(Long value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.R_BANK_ID</code>. bankId,R_BANK_ID
     */
    public Long getRBankId();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.R_COMPANY_ID</code>. companyId,R_COMPANY_ID
     */
    public IResBankAccount setRCompanyId(Long value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.R_COMPANY_ID</code>. companyId,R_COMPANY_ID
     */
    public Long getRCompanyId();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.R_CURRENCY_ID</code>. currencyId,R_CURRENCY_ID
     */
    public IResBankAccount setRCurrencyId(Long value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.R_CURRENCY_ID</code>. currencyId,R_CURRENCY_ID
     */
    public Long getRCurrencyId();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public IResBankAccount setRMemberId(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public String getRMemberId();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.R_PARTNER_ID</code>. partnerId,R_PARTNER_ID
     */
    public IResBankAccount setRPartnerId(Long value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.R_PARTNER_ID</code>. partnerId,R_PARTNER_ID
     */
    public Long getRPartnerId();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IResBankAccount setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IResBankAccount setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IResBankAccount setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IResBankAccount setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IResBankAccount setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IResBankAccount setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IResBankAccount setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_BANK_ACCOUNT.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IResBankAccount
     */
    public void from(up.god.jooq.tables.interfaces.IResBankAccount from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IResBankAccount
     */
    public <E extends up.god.jooq.tables.interfaces.IResBankAccount> E into(E into);

    default IResBankAccount fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getLong("PK_ID"));
        setSCode(json.getString("S_CODE"));
        setSAccNum(json.getString("S_ACC_NUM"));
        setSSanitizedAccNumber(json.getString("S_SANITIZED_ACC_NUMBER"));
        setJConfig(json.getString("J_CONFIG"));
        setIOrder(json.getInteger("I_ORDER"));
        setRltType(json.getLong("RLT_TYPE"));
        setRBankId(json.getLong("R_BANK_ID"));
        setRCompanyId(json.getLong("R_COMPANY_ID"));
        setRCurrencyId(json.getLong("R_CURRENCY_ID"));
        setRMemberId(json.getString("R_MEMBER_ID"));
        setRPartnerId(json.getLong("R_PARTNER_ID"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        json.put("S_CODE",getSCode());
        json.put("S_ACC_NUM",getSAccNum());
        json.put("S_SANITIZED_ACC_NUMBER",getSSanitizedAccNumber());
        json.put("J_CONFIG",getJConfig());
        json.put("I_ORDER",getIOrder());
        json.put("RLT_TYPE",getRltType());
        json.put("R_BANK_ID",getRBankId());
        json.put("R_COMPANY_ID",getRCompanyId());
        json.put("R_CURRENCY_ID",getRCurrencyId());
        json.put("R_MEMBER_ID",getRMemberId());
        json.put("R_PARTNER_ID",getRPartnerId());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
