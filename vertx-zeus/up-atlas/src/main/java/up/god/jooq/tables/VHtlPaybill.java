/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.tables.records.VHtlPaybillRecord;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VHtlPaybill extends TableImpl<VHtlPaybillRecord> {

    private static final long serialVersionUID = -788649759;

    /**
     * The reference instance of <code>DB_HTL.v_htl_paybill</code>
     */
    public static final VHtlPaybill V_HTL_PAYBILL = new VHtlPaybill();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VHtlPaybillRecord> getRecordType() {
        return VHtlPaybillRecord.class;
    }

    /**
     * The column <code>DB_HTL.v_htl_paybill.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<VHtlPaybillRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.v_htl_paybill.I_SEQUENCE</code>. 序号,sequence,I_SEQUENCE
     */
    public final TableField<VHtlPaybillRecord, Integer> I_SEQUENCE = createField("I_SEQUENCE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "序号,sequence,I_SEQUENCE");

    /**
     * The column <code>DB_HTL.v_htl_paybill.RLT_BILL_TYPE</code>. REF: SYS_TABULAR【账单类型】,billType,RLT_BILL_TYPE
     */
    public final TableField<VHtlPaybillRecord, Long> RLT_BILL_TYPE = createField("RLT_BILL_TYPE", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "REF: SYS_TABULAR【账单类型】,billType,RLT_BILL_TYPE");

    /**
     * The column <code>DB_HTL.v_htl_paybill.V_ROOM_NUM</code>. VREF：【账单房号】,roomNum,V_ROOM_NUM
     */
    public final TableField<VHtlPaybillRecord, String> V_ROOM_NUM = createField("V_ROOM_NUM", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "VREF：【账单房号】,roomNum,V_ROOM_NUM");

    /**
     * The column <code>DB_HTL.v_htl_paybill.S_CODE</code>. code,S_CODE
     */
    public final TableField<VHtlPaybillRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.v_htl_paybill.S_NAME</code>. 【名称】消费项名称,name,S_NAME
     */
    public final TableField<VHtlPaybillRecord, String> S_NAME = createField("S_NAME", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "【名称】消费项名称,name,S_NAME");

    /**
     * The column <code>DB_HTL.v_htl_paybill.I_QUANTITY</code>. 【数量】商品数量,quantity,I_QUANTITY
     */
    public final TableField<VHtlPaybillRecord, Integer> I_QUANTITY = createField("I_QUANTITY", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "【数量】商品数量,quantity,I_QUANTITY");

    /**
     * The column <code>DB_HTL.v_htl_paybill.D_AMOUNT_ACTUAL</code>. 【实际总价】实际给付结果,amountActual,D_AMOUNT_ACTUAL
     */
    public final TableField<VHtlPaybillRecord, BigDecimal> D_AMOUNT_ACTUAL = createField("D_AMOUNT_ACTUAL", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "【实际总价】实际给付结果,amountActual,D_AMOUNT_ACTUAL");

    /**
     * The column <code>DB_HTL.v_htl_paybill.IS_INCOME</code>. 【账单方向】，income为true入帐，否则为出帐,income,IS_INCOME
     */
    public final TableField<VHtlPaybillRecord, Boolean> IS_INCOME = createField("IS_INCOME", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "【账单方向】，income为true入帐，否则为出帐,income,IS_INCOME");

    /**
     * The column <code>DB_HTL.v_htl_paybill.S_TRANSFER</code>. 【账单流转】,transfer,S_TRANSFER
     */
    public final TableField<VHtlPaybillRecord, String> S_TRANSFER = createField("S_TRANSFER", org.jooq.impl.SQLDataType.VARCHAR(64), this, "【账单流转】,transfer,S_TRANSFER");

    /**
     * The column <code>DB_HTL.v_htl_paybill.T_COMMENT</code>. 【备注】账单相关备注信息,comment,T_COMMENT
     */
    public final TableField<VHtlPaybillRecord, String> T_COMMENT = createField("T_COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "【备注】账单相关备注信息,comment,T_COMMENT");

    /**
     * The column <code>DB_HTL.v_htl_paybill.S_EMPLOYEE_NO</code>. 【工号】,employeeNo,S_EMPLOYEE_NO
     */
    public final TableField<VHtlPaybillRecord, String> S_EMPLOYEE_NO = createField("S_EMPLOYEE_NO", org.jooq.impl.SQLDataType.VARCHAR(64), this, "【工号】,employeeNo,S_EMPLOYEE_NO");

    /**
     * The column <code>DB_HTL.v_htl_paybill.S_SHIFT</code>. 【班次】保存结果，同房号字段,shift,S_SHIFT
     */
    public final TableField<VHtlPaybillRecord, String> S_SHIFT = createField("S_SHIFT", org.jooq.impl.SQLDataType.VARCHAR(64), this, "【班次】保存结果，同房号字段,shift,S_SHIFT");

    /**
     * The column <code>DB_HTL.v_htl_paybill.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<VHtlPaybillRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.v_htl_paybill.D_OPERATE_DATE</code>. operateDate,D_OPERATE_DATE
     */
    public final TableField<VHtlPaybillRecord, LocalDateTime> D_OPERATE_DATE = createField("D_OPERATE_DATE", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "operateDate,D_OPERATE_DATE");

    /**
     * The column <code>DB_HTL.v_htl_paybill.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<VHtlPaybillRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.v_htl_paybill.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<VHtlPaybillRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * Create a <code>DB_HTL.v_htl_paybill</code> table reference
     */
    public VHtlPaybill() {
        this(DSL.name("v_htl_paybill"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.v_htl_paybill</code> table reference
     */
    public VHtlPaybill(String alias) {
        this(DSL.name(alias), V_HTL_PAYBILL);
    }

    /**
     * Create an aliased <code>DB_HTL.v_htl_paybill</code> table reference
     */
    public VHtlPaybill(Name alias) {
        this(alias, V_HTL_PAYBILL);
    }

    private VHtlPaybill(Name alias, Table<VHtlPaybillRecord> aliased) {
        this(alias, aliased, null);
    }

    private VHtlPaybill(Name alias, Table<VHtlPaybillRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "VIEW");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VHtlPaybill as(String alias) {
        return new VHtlPaybill(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VHtlPaybill as(Name alias) {
        return new VHtlPaybill(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VHtlPaybill rename(String name) {
        return new VHtlPaybill(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VHtlPaybill rename(Name name) {
        return new VHtlPaybill(name, null);
    }
}
