/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IResMember extends Serializable {

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.PK_ID</code>. uniqueId,PK_ID
     */
    public IResMember setPkId(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.PK_ID</code>. uniqueId,PK_ID
     */
    public String getPkId();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.D_BIRTHDAY</code>. birthday,D_BIRTHDAY
     */
    public IResMember setDBirthday(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.D_BIRTHDAY</code>. birthday,D_BIRTHDAY
     */
    public LocalDateTime getDBirthday();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.L_POINT</code>. 积分,point,L_POINT
     */
    public IResMember setLPoint(Long value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.L_POINT</code>. 积分,point,L_POINT
     */
    public Long getLPoint();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.S_CODE</code>. code,S_CODE
     */
    public IResMember setSCode(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.S_NICKNAME</code>. nickname,S_NICKNAME
     */
    public IResMember setSNickname(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.S_NICKNAME</code>. nickname,S_NICKNAME
     */
    public String getSNickname();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.S_PHOTO</code>. photo,S_PHOTO
     */
    public IResMember setSPhoto(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.S_PHOTO</code>. photo,S_PHOTO
     */
    public String getSPhoto();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.S_REALNAME</code>. realname,S_REALNAME
     */
    public IResMember setSRealname(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.S_REALNAME</code>. realname,S_REALNAME
     */
    public String getSRealname();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.S_SERIAL</code>. serial,S_SERIAL
     */
    public IResMember setSSerial(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.S_SERIAL</code>. serial,S_SERIAL
     */
    public String getSSerial();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.J_CONFIG</code>. config,J_CONFIG
     */
    public IResMember setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.RLT_MBER_LEVEL</code>. 会员等级,level,RLT_MBER_LEVEL
     */
    public IResMember setRltMberLevel(Long value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.RLT_MBER_LEVEL</code>. 会员等级,level,RLT_MBER_LEVEL
     */
    public Long getRltMberLevel();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.RLT_MBER_STATUS</code>. 会员状态,status,RLT_MBER_STATUS
     */
    public IResMember setRltMberStatus(Long value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.RLT_MBER_STATUS</code>. 会员状态,status,RLT_MBER_STATUS
     */
    public Long getRltMberStatus();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.R_USER_ID</code>. userId,R_USER_ID
     */
    public IResMember setRUserId(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.R_USER_ID</code>. userId,R_USER_ID
     */
    public String getRUserId();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.IS_MALE</code>. 男？true为男，false为女,male,IS_MALE
     */
    public IResMember setIsMale(Boolean value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.IS_MALE</code>. 男？true为男，false为女,male,IS_MALE
     */
    public Boolean getIsMale();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IResMember setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IResMember setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IResMember setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IResMember setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IResMember setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IResMember setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.RES_MEMBER.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IResMember setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_MEMBER.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IResMember
     */
    public void from(up.god.jooq.tables.interfaces.IResMember from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IResMember
     */
    public <E extends up.god.jooq.tables.interfaces.IResMember> E into(E into);

    default IResMember fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getString("PK_ID"));
        // Omitting unrecognized type java.time.LocalDateTime for column D_BIRTHDAY!
        setLPoint(json.getLong("L_POINT"));
        setSCode(json.getString("S_CODE"));
        setSNickname(json.getString("S_NICKNAME"));
        setSPhoto(json.getString("S_PHOTO"));
        setSRealname(json.getString("S_REALNAME"));
        setSSerial(json.getString("S_SERIAL"));
        setJConfig(json.getString("J_CONFIG"));
        setRltMberLevel(json.getLong("RLT_MBER_LEVEL"));
        setRltMberStatus(json.getLong("RLT_MBER_STATUS"));
        setRUserId(json.getString("R_USER_ID"));
        setIsMale(json.getBoolean("IS_MALE"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.time.LocalDateTime for column D_BIRTHDAY!
        json.put("L_POINT",getLPoint());
        json.put("S_CODE",getSCode());
        json.put("S_NICKNAME",getSNickname());
        json.put("S_PHOTO",getSPhoto());
        json.put("S_REALNAME",getSRealname());
        json.put("S_SERIAL",getSSerial());
        json.put("J_CONFIG",getJConfig());
        json.put("RLT_MBER_LEVEL",getRltMberLevel());
        json.put("RLT_MBER_STATUS",getRltMberStatus());
        json.put("R_USER_ID",getRUserId());
        json.put("IS_MALE",getIsMale());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
