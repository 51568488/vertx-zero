/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IPsiRepository extends Serializable {

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.PK_ID</code>. uniqueId,PK_ID
     */
    public IPsiRepository setPkId(Long value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.PK_ID</code>. uniqueId,PK_ID
     */
    public Long getPkId();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.D_EXPIRED_TIME</code>. expiredTime,D_EXPIRED_TIME
     */
    public IPsiRepository setDExpiredTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.D_EXPIRED_TIME</code>. expiredTime,D_EXPIRED_TIME
     */
    public LocalDateTime getDExpiredTime();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.D_PRODUCE_TIME</code>. produceTime,D_PRODUCE_TIME
     */
    public IPsiRepository setDProduceTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.D_PRODUCE_TIME</code>. produceTime,D_PRODUCE_TIME
     */
    public LocalDateTime getDProduceTime();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.T_COMMENT</code>. comment,T_COMMENT
     */
    public IPsiRepository setTComment(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.T_COMMENT</code>. comment,T_COMMENT
     */
    public String getTComment();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.V_MERCHANDISE_ID</code>. merchandiseId,V_MERCHANDISE_ID
     */
    public IPsiRepository setVMerchandiseId(Long value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.V_MERCHANDISE_ID</code>. merchandiseId,V_MERCHANDISE_ID
     */
    public Long getVMerchandiseId();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.S_NAME</code>. name,S_NAME
     */
    public IPsiRepository setSName(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.S_NAME</code>. name,S_NAME
     */
    public String getSName();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.S_CODE</code>. code,S_CODE
     */
    public IPsiRepository setSCode(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.S_WAREHOUSE</code>. warehouse,S_WAREHOUSE
     */
    public IPsiRepository setSWarehouse(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.S_WAREHOUSE</code>. warehouse,S_WAREHOUSE
     */
    public String getSWarehouse();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.J_CONFIG</code>. config,J_CONFIG
     */
    public IPsiRepository setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_BROKEN</code>. 损坏数量,qtyBroken,I_QTY_BROKEN
     */
    public IPsiRepository setIQtyBroken(Integer value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_BROKEN</code>. 损坏数量,qtyBroken,I_QTY_BROKEN
     */
    public Integer getIQtyBroken();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_LEFT</code>. 剩余数量,qtyLeft,I_QTY_LEFT
     */
    public IPsiRepository setIQtyLeft(Integer value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_LEFT</code>. 剩余数量,qtyLeft,I_QTY_LEFT
     */
    public Integer getIQtyLeft();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_LIMIT</code>. 容量上限,qtyLimit,I_QTY_LIMIT
     */
    public IPsiRepository setIQtyLimit(Integer value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_LIMIT</code>. 容量上限,qtyLimit,I_QTY_LIMIT
     */
    public Integer getIQtyLimit();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_TAKEN</code>. 占用数量,qtyTaken,I_QTY_TAKEN
     */
    public IPsiRepository setIQtyTaken(Integer value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_TAKEN</code>. 占用数量,qtyTaken,I_QTY_TAKEN
     */
    public Integer getIQtyTaken();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.R_UBICATION_ID</code>. ubicationId,R_UBICATION_ID
     */
    public IPsiRepository setRUbicationId(Long value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.R_UBICATION_ID</code>. ubicationId,R_UBICATION_ID
     */
    public Long getRUbicationId();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.IS_REJECT</code>. reject,IS_REJECT
     */
    public IPsiRepository setIsReject(Boolean value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.IS_REJECT</code>. reject,IS_REJECT
     */
    public Boolean getIsReject();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.IS_SCRAP</code>. scrap,IS_SCRAP
     */
    public IPsiRepository setIsScrap(Boolean value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.IS_SCRAP</code>. scrap,IS_SCRAP
     */
    public Boolean getIsScrap();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IPsiRepository setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IPsiRepository setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IPsiRepository setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IPsiRepository setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IPsiRepository setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IPsiRepository setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IPsiRepository setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IPsiRepository
     */
    public void from(up.god.jooq.tables.interfaces.IPsiRepository from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IPsiRepository
     */
    public <E extends up.god.jooq.tables.interfaces.IPsiRepository> E into(E into);

    default IPsiRepository fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getLong("PK_ID"));
        // Omitting unrecognized type java.time.LocalDateTime for column D_EXPIRED_TIME!
        // Omitting unrecognized type java.time.LocalDateTime for column D_PRODUCE_TIME!
        setTComment(json.getString("T_COMMENT"));
        setVMerchandiseId(json.getLong("V_MERCHANDISE_ID"));
        setSName(json.getString("S_NAME"));
        setSCode(json.getString("S_CODE"));
        setSWarehouse(json.getString("S_WAREHOUSE"));
        setJConfig(json.getString("J_CONFIG"));
        setIQtyBroken(json.getInteger("I_QTY_BROKEN"));
        setIQtyLeft(json.getInteger("I_QTY_LEFT"));
        setIQtyLimit(json.getInteger("I_QTY_LIMIT"));
        setIQtyTaken(json.getInteger("I_QTY_TAKEN"));
        setRUbicationId(json.getLong("R_UBICATION_ID"));
        setIsReject(json.getBoolean("IS_REJECT"));
        setIsScrap(json.getBoolean("IS_SCRAP"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.time.LocalDateTime for column D_EXPIRED_TIME!
        // Omitting unrecognized type java.time.LocalDateTime for column D_PRODUCE_TIME!
        json.put("T_COMMENT",getTComment());
        json.put("V_MERCHANDISE_ID",getVMerchandiseId());
        json.put("S_NAME",getSName());
        json.put("S_CODE",getSCode());
        json.put("S_WAREHOUSE",getSWarehouse());
        json.put("J_CONFIG",getJConfig());
        json.put("I_QTY_BROKEN",getIQtyBroken());
        json.put("I_QTY_LEFT",getIQtyLeft());
        json.put("I_QTY_LIMIT",getIQtyLimit());
        json.put("I_QTY_TAKEN",getIQtyTaken());
        json.put("R_UBICATION_ID",getRUbicationId());
        json.put("IS_REJECT",getIsReject());
        json.put("IS_SCRAP",getIsScrap());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
