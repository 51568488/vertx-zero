/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface ISecUserMatrix extends Serializable {

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.PK_ID</code>. uniqueId,PK_ID
     */
    public ISecUserMatrix setPkId(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.PK_ID</code>. uniqueId,PK_ID
     */
    public String getPkId();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.L_DURATION</code>. duration,L_DURATION
     */
    public ISecUserMatrix setLDuration(Long value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.L_DURATION</code>. duration,L_DURATION
     */
    public Long getLDuration();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.T_PROJECTION</code>. projection,T_PROJECTION
     */
    public ISecUserMatrix setTProjection(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.T_PROJECTION</code>. projection,T_PROJECTION
     */
    public String getTProjection();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.T_QUERY</code>. query,T_QUERY
     */
    public ISecUserMatrix setTQuery(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.T_QUERY</code>. query,T_QUERY
     */
    public String getTQuery();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.S_CODE</code>. code,S_CODE
     */
    public ISecUserMatrix setSCode(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.S_ACTION_CODE</code>. actionCode,S_ACTION_CODE
     */
    public ISecUserMatrix setSActionCode(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.S_ACTION_CODE</code>. actionCode,S_ACTION_CODE
     */
    public String getSActionCode();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.J_CONFIG</code>. config,J_CONFIG
     */
    public ISecUserMatrix setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.R_USER_ID</code>. userId,R_USER_ID
     */
    public ISecUserMatrix setRUserId(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.R_USER_ID</code>. userId,R_USER_ID
     */
    public String getRUserId();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.R_RES_ID</code>. resourceId,R_RES_ID
     */
    public ISecUserMatrix setRResId(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.R_RES_ID</code>. resourceId,R_RES_ID
     */
    public String getRResId();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.IS_APPROVAL</code>. approval,IS_APPROVAL
     */
    public ISecUserMatrix setIsApproval(Boolean value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.IS_APPROVAL</code>. approval,IS_APPROVAL
     */
    public Boolean getIsApproval();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public ISecUserMatrix setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public ISecUserMatrix setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public ISecUserMatrix setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public ISecUserMatrix setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public ISecUserMatrix setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public ISecUserMatrix setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.SEC_USER_MATRIX.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public ISecUserMatrix setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.SEC_USER_MATRIX.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface ISecUserMatrix
     */
    public void from(up.god.jooq.tables.interfaces.ISecUserMatrix from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface ISecUserMatrix
     */
    public <E extends up.god.jooq.tables.interfaces.ISecUserMatrix> E into(E into);

    default ISecUserMatrix fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getString("PK_ID"));
        setLDuration(json.getLong("L_DURATION"));
        setTProjection(json.getString("T_PROJECTION"));
        setTQuery(json.getString("T_QUERY"));
        setSCode(json.getString("S_CODE"));
        setSActionCode(json.getString("S_ACTION_CODE"));
        setJConfig(json.getString("J_CONFIG"));
        setRUserId(json.getString("R_USER_ID"));
        setRResId(json.getString("R_RES_ID"));
        setIsApproval(json.getBoolean("IS_APPROVAL"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        json.put("L_DURATION",getLDuration());
        json.put("T_PROJECTION",getTProjection());
        json.put("T_QUERY",getTQuery());
        json.put("S_CODE",getSCode());
        json.put("S_ACTION_CODE",getSActionCode());
        json.put("J_CONFIG",getJConfig());
        json.put("R_USER_ID",getRUserId());
        json.put("R_RES_ID",getRResId());
        json.put("IS_APPROVAL",getIsApproval());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
