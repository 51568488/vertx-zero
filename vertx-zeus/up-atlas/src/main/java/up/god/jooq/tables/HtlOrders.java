/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.HtlOrdersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HtlOrders extends TableImpl<HtlOrdersRecord> {

    private static final long serialVersionUID = -1981964145;

    /**
     * The reference instance of <code>DB_HTL.HTL_ORDERS</code>
     */
    public static final HtlOrders HTL_ORDERS = new HtlOrders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HtlOrdersRecord> getRecordType() {
        return HtlOrdersRecord.class;
    }

    /**
     * The column <code>DB_HTL.HTL_ORDERS.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<HtlOrdersRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.D_AMOUNT</code>. 【会员卡卡余额】（ReadOnly固定值）。,amount,D_AMOUNT
     */
    public final TableField<HtlOrdersRecord, BigDecimal> D_AMOUNT = createField("D_AMOUNT", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "【会员卡卡余额】（ReadOnly固定值）。,amount,D_AMOUNT");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.D_AMOUNT_ACTUAL</code>. 【实际金额】该订单所有订单项减去折扣后的实际金额（amountActual x quantity）总和。,amountActual,D_AMOUNT_ACTUAL
     */
    public final TableField<HtlOrdersRecord, BigDecimal> D_AMOUNT_ACTUAL = createField("D_AMOUNT_ACTUAL", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "【实际金额】该订单所有订单项减去折扣后的实际金额（amountActual x quantity）总和。,amountActual,D_AMOUNT_ACTUAL");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.D_AMOUNT_TAXED</code>. 【税后金额】该订单税后的金额，amountTaxed = amountActual x ( 1 - taxRate )。,amountTaxed,D_AMOUNT_TAXED
     */
    public final TableField<HtlOrdersRecord, BigDecimal> D_AMOUNT_TAXED = createField("D_AMOUNT_TAXED", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "【税后金额】该订单税后的金额，amountTaxed = amountActual x ( 1 - taxRate )。,amountTaxed,D_AMOUNT_TAXED");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.D_AMOUNT_TOTAL</code>. 【总金额】该订单所有订单项中原始金额（amountPrice x quantity）总和。,amountTotal,D_AMOUNT_TOTAL
     */
    public final TableField<HtlOrdersRecord, BigDecimal> D_AMOUNT_TOTAL = createField("D_AMOUNT_TOTAL", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "【总金额】该订单所有订单项中原始金额（amountPrice x quantity）总和。,amountTotal,D_AMOUNT_TOTAL");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.D_FINISHED_TIME</code>. 【完成时间】该订单关闭的时间，或者被取消的时间。,finishedTime,D_FINISHED_TIME
     */
    public final TableField<HtlOrdersRecord, LocalDateTime> D_FINISHED_TIME = createField("D_FINISHED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "【完成时间】该订单关闭的时间，或者被取消的时间。,finishedTime,D_FINISHED_TIME");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.D_ORDER_TIME</code>. 【订单时间】下订/制单时间。,orderTime,D_ORDER_TIME
     */
    public final TableField<HtlOrdersRecord, LocalDateTime> D_ORDER_TIME = createField("D_ORDER_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "【订单时间】下订/制单时间。,orderTime,D_ORDER_TIME");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.D_TAX</code>. 【订单税】该订单的税信息：tax = amountActual x taxRate,tax,D_TAX
     */
    public final TableField<HtlOrdersRecord, BigDecimal> D_TAX = createField("D_TAX", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "【订单税】该订单的税信息：tax = amountActual x taxRate,tax,D_TAX");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.D_TAX_RATE</code>. 【税率】该订单的税率信息。,taxRate,D_TAX_RATE
     */
    public final TableField<HtlOrdersRecord, BigDecimal> D_TAX_RATE = createField("D_TAX_RATE", org.jooq.impl.SQLDataType.DECIMAL(3, 2), this, "【税率】该订单的税率信息。,taxRate,D_TAX_RATE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.T_COMMENT</code>. 【备注信息】该订单备注信息,comment,T_COMMENT
     */
    public final TableField<HtlOrdersRecord, String> T_COMMENT = createField("T_COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "【备注信息】该订单备注信息,comment,T_COMMENT");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.V_COMPANY_ID</code>. REF: RES_COMPANY【所属公司】当前订单所属公司ID。,companyId,V_COMPANY_ID
     */
    public final TableField<HtlOrdersRecord, Long> V_COMPANY_ID = createField("V_COMPANY_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF: RES_COMPANY【所属公司】当前订单所属公司ID。,companyId,V_COMPANY_ID");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.V_CURRENCY_ID</code>. REF: RES_CURRENCY【关联货币】当前订单使用的货币信息。,currencyId,V_CURRENCY_ID
     */
    public final TableField<HtlOrdersRecord, Long> V_CURRENCY_ID = createField("V_CURRENCY_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF: RES_CURRENCY【关联货币】当前订单使用的货币信息。,currencyId,V_CURRENCY_ID");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_CODE</code>. code,S_CODE
     */
    public final TableField<HtlOrdersRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_CREATOR</code>. creator,S_CREATOR
     */
    public final TableField<HtlOrdersRecord, String> S_CREATOR = createField("S_CREATOR", org.jooq.impl.SQLDataType.VARCHAR(255), this, "creator,S_CREATOR");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_CREDENCE</code>. credence,S_CREDENCE
     */
    public final TableField<HtlOrdersRecord, String> S_CREDENCE = createField("S_CREDENCE", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "credence,S_CREDENCE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_GROUP_LEADER</code>. groupLeader,S_GROUP_LEADER
     */
    public final TableField<HtlOrdersRecord, String> S_GROUP_LEADER = createField("S_GROUP_LEADER", org.jooq.impl.SQLDataType.VARCHAR(192), this, "groupLeader,S_GROUP_LEADER");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_GROUP_NAME</code>. groupName,S_GROUP_NAME
     */
    public final TableField<HtlOrdersRecord, String> S_GROUP_NAME = createField("S_GROUP_NAME", org.jooq.impl.SQLDataType.VARCHAR(192), this, "groupName,S_GROUP_NAME");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_MEMBER</code>. member,S_MEMBER
     */
    public final TableField<HtlOrdersRecord, String> S_MEMBER = createField("S_MEMBER", org.jooq.impl.SQLDataType.VARCHAR(255), this, "member,S_MEMBER");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_OPERATOR</code>. operator,S_OPERATOR
     */
    public final TableField<HtlOrdersRecord, String> S_OPERATOR = createField("S_OPERATOR", org.jooq.impl.SQLDataType.VARCHAR(255), this, "operator,S_OPERATOR");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_PARTNER</code>. partner,S_PARTNER
     */
    public final TableField<HtlOrdersRecord, String> S_PARTNER = createField("S_PARTNER", org.jooq.impl.SQLDataType.VARCHAR(255), this, "partner,S_PARTNER");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_PHONE</code>. 【预定电话】该订单预定人联系电话,phone,S_PHONE
     */
    public final TableField<HtlOrdersRecord, String> S_PHONE = createField("S_PHONE", org.jooq.impl.SQLDataType.VARCHAR(20), this, "【预定电话】该订单预定人联系电话,phone,S_PHONE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_PRESERVOR</code>. preservor,S_PRESERVOR
     */
    public final TableField<HtlOrdersRecord, String> S_PRESERVOR = createField("S_PRESERVOR", org.jooq.impl.SQLDataType.VARCHAR(64), this, "preservor,S_PRESERVOR");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_SERIAL</code>. serial,S_SERIAL
     */
    public final TableField<HtlOrdersRecord, String> S_SERIAL = createField("S_SERIAL", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "serial,S_SERIAL");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_STATUS</code>. orderStatus,S_STATUS
     */
    public final TableField<HtlOrdersRecord, String> S_STATUS = createField("S_STATUS", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "orderStatus,S_STATUS");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.S_SURETY</code>. 担保人,surety,S_SURETY
     */
    public final TableField<HtlOrdersRecord, String> S_SURETY = createField("S_SURETY", org.jooq.impl.SQLDataType.VARCHAR(64), this, "担保人,surety,S_SURETY");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<HtlOrdersRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.RLT_CODE_MARKET</code>. codeMarket,RLT_CODE_MARKET
     */
    public final TableField<HtlOrdersRecord, Long> RLT_CODE_MARKET = createField("RLT_CODE_MARKET", org.jooq.impl.SQLDataType.BIGINT, this, "codeMarket,RLT_CODE_MARKET");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.RLT_CODE_SOURCE</code>. codeSource,RLT_CODE_SOURCE
     */
    public final TableField<HtlOrdersRecord, Long> RLT_CODE_SOURCE = createField("RLT_CODE_SOURCE", org.jooq.impl.SQLDataType.BIGINT, this, "codeSource,RLT_CODE_SOURCE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.RLT_ORD_CATEGORY</code>. cat,RLT_ORD_CATEGORY
     */
    public final TableField<HtlOrdersRecord, Long> RLT_ORD_CATEGORY = createField("RLT_ORD_CATEGORY", org.jooq.impl.SQLDataType.BIGINT, this, "cat,RLT_ORD_CATEGORY");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.RLT_ORD_METHOD</code>. method,RLT_ORD_METHOD
     */
    public final TableField<HtlOrdersRecord, Long> RLT_ORD_METHOD = createField("RLT_ORD_METHOD", org.jooq.impl.SQLDataType.BIGINT, this, "method,RLT_ORD_METHOD");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.RLT_SURETY_TYPE</code>. suretyType,RLT_SURETY_TYPE
     */
    public final TableField<HtlOrdersRecord, Long> RLT_SURETY_TYPE = createField("RLT_SURETY_TYPE", org.jooq.impl.SQLDataType.BIGINT, this, "suretyType,RLT_SURETY_TYPE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.R_HOTEL_ID</code>. hotelId,R_HOTEL_ID
     */
    public final TableField<HtlOrdersRecord, Long> R_HOTEL_ID = createField("R_HOTEL_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "hotelId,R_HOTEL_ID");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public final TableField<HtlOrdersRecord, String> R_MEMBER_ID = createField("R_MEMBER_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "memberId,R_MEMBER_ID");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.R_OPERATOR_ID</code>. operatorId,R_OPERATOR_ID
     */
    public final TableField<HtlOrdersRecord, String> R_OPERATOR_ID = createField("R_OPERATOR_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "operatorId,R_OPERATOR_ID");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.R_PARTNER_ID</code>. REF: RES_PARTNER【所属伙伴】当前订单对应的供应商、协议单位对应ID。,partnerId,R_PARTNER_ID
     */
    public final TableField<HtlOrdersRecord, Long> R_PARTNER_ID = createField("R_PARTNER_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF: RES_PARTNER【所属伙伴】当前订单对应的供应商、协议单位对应ID。,partnerId,R_PARTNER_ID");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.IS_APPROVAL</code>. 【是否审核】当前订单是否已经审核？,approval,IS_APPROVAL
     */
    public final TableField<HtlOrdersRecord, Boolean> IS_APPROVAL = createField("IS_APPROVAL", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "【是否审核】当前订单是否已经审核？,approval,IS_APPROVAL");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.IS_DIRECT</code>. direct,IS_DIRECT
     */
    public final TableField<HtlOrdersRecord, Boolean> IS_DIRECT = createField("IS_DIRECT", org.jooq.impl.SQLDataType.BOOLEAN, this, "direct,IS_DIRECT");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.IS_GROUPED</code>. grouped,IS_GROUPED
     */
    public final TableField<HtlOrdersRecord, Boolean> IS_GROUPED = createField("IS_GROUPED", org.jooq.impl.SQLDataType.BOOLEAN, this, "grouped,IS_GROUPED");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.IS_INVOICE</code>. 【是否开票】当前订单是否开了发票？,invoice,IS_INVOICE
     */
    public final TableField<HtlOrdersRecord, Boolean> IS_INVOICE = createField("IS_INVOICE", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "【是否开票】当前订单是否开了发票？,invoice,IS_INVOICE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<HtlOrdersRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<HtlOrdersRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<HtlOrdersRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<HtlOrdersRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<HtlOrdersRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<HtlOrdersRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.HTL_ORDERS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<HtlOrdersRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.HTL_ORDERS</code> table reference
     */
    public HtlOrders() {
        this(DSL.name("HTL_ORDERS"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.HTL_ORDERS</code> table reference
     */
    public HtlOrders(String alias) {
        this(DSL.name(alias), HTL_ORDERS);
    }

    /**
     * Create an aliased <code>DB_HTL.HTL_ORDERS</code> table reference
     */
    public HtlOrders(Name alias) {
        this(alias, HTL_ORDERS);
    }

    private HtlOrders(Name alias, Table<HtlOrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private HtlOrders(Name alias, Table<HtlOrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HTL_ORDERS_FK_HTL_ORDERS_R_HOTEL_ID, Indexes.HTL_ORDERS_FK_HTL_ORDERS_R_MEMBER_ID, Indexes.HTL_ORDERS_FK_HTL_ORDERS_R_OPERATOR_ID, Indexes.HTL_ORDERS_FK_HTL_ORDERS_R_PARTNER_ID, Indexes.HTL_ORDERS_PRIMARY, Indexes.HTL_ORDERS_UK_HTL_ORDERS_S_CODE_Z_SIGMA, Indexes.HTL_ORDERS_UK_HTL_ORDERS_S_SERIAL_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HtlOrdersRecord> getPrimaryKey() {
        return Keys.KEY_HTL_ORDERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HtlOrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<HtlOrdersRecord>>asList(Keys.KEY_HTL_ORDERS_PRIMARY, Keys.KEY_HTL_ORDERS_UK_HTL_ORDERS_S_CODE_Z_SIGMA, Keys.KEY_HTL_ORDERS_UK_HTL_ORDERS_S_SERIAL_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtlOrders as(String alias) {
        return new HtlOrders(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtlOrders as(Name alias) {
        return new HtlOrders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HtlOrders rename(String name) {
        return new HtlOrders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HtlOrders rename(Name name) {
        return new HtlOrders(name, null);
    }
}
