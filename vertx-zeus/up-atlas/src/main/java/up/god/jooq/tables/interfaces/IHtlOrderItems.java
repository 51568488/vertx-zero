/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IHtlOrderItems extends Serializable {

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.PK_ID</code>. uniqueId,PK_ID
     */
    public IHtlOrderItems setPkId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.PK_ID</code>. uniqueId,PK_ID
     */
    public Long getPkId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.D_AMOUNT_ACTUAL</code>. 【实际单价】该明细的实际单价：amountActual = amountPrice x ( 1 - discount ),amountActual,D_AMOUNT_ACTUAL
     */
    public IHtlOrderItems setDAmountActual(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.D_AMOUNT_ACTUAL</code>. 【实际单价】该明细的实际单价：amountActual = amountPrice x ( 1 - discount ),amountActual,D_AMOUNT_ACTUAL
     */
    public BigDecimal getDAmountActual();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.D_AMOUNT_PRICE</code>. 【单价】该订单明细对应商品的单价。,amountPrice,D_AMOUNT_PRICE
     */
    public IHtlOrderItems setDAmountPrice(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.D_AMOUNT_PRICE</code>. 【单价】该订单明细对应商品的单价。,amountPrice,D_AMOUNT_PRICE
     */
    public BigDecimal getDAmountPrice();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.D_AMOUNT_TOTAL</code>. 【总价】该明细的总价格：amountTotal = amountActual x quantity,amountTotal,D_AMOUNT_TOTAL
     */
    public IHtlOrderItems setDAmountTotal(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.D_AMOUNT_TOTAL</code>. 【总价】该明细的总价格：amountTotal = amountActual x quantity,amountTotal,D_AMOUNT_TOTAL
     */
    public BigDecimal getDAmountTotal();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.D_ARRIVE_TIME</code>. arriveTime,D_ARRIVE_TIME
     */
    public IHtlOrderItems setDArriveTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.D_ARRIVE_TIME</code>. arriveTime,D_ARRIVE_TIME
     */
    public LocalDateTime getDArriveTime();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.D_BREKKER_PRICE</code>. brekkerPrice,D_BREKKER_PRICE
     */
    public IHtlOrderItems setDBrekkerPrice(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.D_BREKKER_PRICE</code>. brekkerPrice,D_BREKKER_PRICE
     */
    public BigDecimal getDBrekkerPrice();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.D_DISCOUNT</code>. 【折扣率】格式为小数，单位%，用于记录当前明细的折扣率,discount,D_DISCOUNT
     */
    public IHtlOrderItems setDDiscount(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.D_DISCOUNT</code>. 【折扣率】格式为小数，单位%，用于记录当前明细的折扣率,discount,D_DISCOUNT
     */
    public BigDecimal getDDiscount();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.D_LEAVE_TIME</code>. leaveTime,D_LEAVE_TIME
     */
    public IHtlOrderItems setDLeaveTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.D_LEAVE_TIME</code>. leaveTime,D_LEAVE_TIME
     */
    public LocalDateTime getDLeaveTime();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.S_CODE</code>. code,S_CODE
     */
    public IHtlOrderItems setSCode(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.S_SERIAL</code>. REF:SYS_NUMBER【订单明细编号】系统自动生成。,serial,S_SERIAL
     */
    public IHtlOrderItems setSSerial(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.S_SERIAL</code>. REF:SYS_NUMBER【订单明细编号】系统自动生成。,serial,S_SERIAL
     */
    public String getSSerial();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.J_CONFIG</code>. config,J_CONFIG
     */
    public IHtlOrderItems setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.I_BK_TICKET</code>. brekkerTicket,I_BK_TICKET
     */
    public IHtlOrderItems setIBkTicket(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.I_BK_TICKET</code>. brekkerTicket,I_BK_TICKET
     */
    public Integer getIBkTicket();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.I_DR_TICKET</code>. dinnerTicket,I_DR_TICKET
     */
    public IHtlOrderItems setIDrTicket(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.I_DR_TICKET</code>. dinnerTicket,I_DR_TICKET
     */
    public Integer getIDrTicket();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.I_INSIDE_DAYS</code>. insideDays,I_INSIDE_DAYS
     */
    public IHtlOrderItems setIInsideDays(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.I_INSIDE_DAYS</code>. insideDays,I_INSIDE_DAYS
     */
    public Integer getIInsideDays();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.I_INSIDE_PERSONS</code>. insidePersons,I_INSIDE_PERSONS
     */
    public IHtlOrderItems setIInsidePersons(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.I_INSIDE_PERSONS</code>. insidePersons,I_INSIDE_PERSONS
     */
    public Integer getIInsidePersons();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.I_LH_TICKET</code>. lunchTicket,I_LH_TICKET
     */
    public IHtlOrderItems setILhTicket(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.I_LH_TICKET</code>. lunchTicket,I_LH_TICKET
     */
    public Integer getILhTicket();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.I_QUANTITY</code>. 【数量】该订单明细对应的商品数量，一条明细记录中仅允许一种商品。,quantity,I_QUANTITY
     */
    public IHtlOrderItems setIQuantity(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.I_QUANTITY</code>. 【数量】该订单明细对应的商品数量，一条明细记录中仅允许一种商品。,quantity,I_QUANTITY
     */
    public Integer getIQuantity();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.I_RCOUNTER</code>. roomCounter,I_RCOUNTER
     */
    public IHtlOrderItems setIRcounter(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.I_RCOUNTER</code>. roomCounter,I_RCOUNTER
     */
    public Integer getIRcounter();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.I_SP_TICKET</code>. supperTicket,I_SP_TICKET
     */
    public IHtlOrderItems setISpTicket(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.I_SP_TICKET</code>. supperTicket,I_SP_TICKET
     */
    public Integer getISpTicket();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.R_CODE_COMMISSION_ID</code>. codeCommission,R_CODE_COMMISSION_ID
     */
    public IHtlOrderItems setRCodeCommissionId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.R_CODE_COMMISSION_ID</code>. codeCommission,R_CODE_COMMISSION_ID
     */
    public Long getRCodeCommissionId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.R_CODE_GROUP_ID</code>. codeGroup,R_CODE_GROUP_ID
     */
    public IHtlOrderItems setRCodeGroupId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.R_CODE_GROUP_ID</code>. codeGroup,R_CODE_GROUP_ID
     */
    public Long getRCodeGroupId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.R_CODE_PRICE_ID</code>. codePrice,R_CODE_PRICE_ID
     */
    public IHtlOrderItems setRCodePriceId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.R_CODE_PRICE_ID</code>. codePrice,R_CODE_PRICE_ID
     */
    public Long getRCodePriceId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.R_ORDER_ID</code>. REF：HTL_ORDERS【订单ID】该明细关联的订单ID值,orderId,R_ORDER_ID
     */
    public IHtlOrderItems setROrderId(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.R_ORDER_ID</code>. REF：HTL_ORDERS【订单ID】该明细关联的订单ID值,orderId,R_ORDER_ID
     */
    public String getROrderId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.R_ROOM_TYPE_ID</code>. roomTypeId,R_ROOM_TYPE_ID
     */
    public IHtlOrderItems setRRoomTypeId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.R_ROOM_TYPE_ID</code>. roomTypeId,R_ROOM_TYPE_ID
     */
    public Long getRRoomTypeId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.IS_BREKKER</code>. brekker,IS_BREKKER
     */
    public IHtlOrderItems setIsBrekker(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.IS_BREKKER</code>. brekker,IS_BREKKER
     */
    public Boolean getIsBrekker();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.IS_POS</code>. pos,IS_POS
     */
    public IHtlOrderItems setIsPos(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.IS_POS</code>. pos,IS_POS
     */
    public Boolean getIsPos();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IHtlOrderItems setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IHtlOrderItems setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IHtlOrderItems setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IHtlOrderItems setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IHtlOrderItems setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IHtlOrderItems setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IHtlOrderItems setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDER_ITEMS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IHtlOrderItems
     */
    public void from(up.god.jooq.tables.interfaces.IHtlOrderItems from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IHtlOrderItems
     */
    public <E extends up.god.jooq.tables.interfaces.IHtlOrderItems> E into(E into);

    default IHtlOrderItems fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getLong("PK_ID"));
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_ACTUAL!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_PRICE!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_TOTAL!
        // Omitting unrecognized type java.time.LocalDateTime for column D_ARRIVE_TIME!
        // Omitting unrecognized type java.math.BigDecimal for column D_BREKKER_PRICE!
        // Omitting unrecognized type java.math.BigDecimal for column D_DISCOUNT!
        // Omitting unrecognized type java.time.LocalDateTime for column D_LEAVE_TIME!
        setSCode(json.getString("S_CODE"));
        setSSerial(json.getString("S_SERIAL"));
        setJConfig(json.getString("J_CONFIG"));
        setIBkTicket(json.getInteger("I_BK_TICKET"));
        setIDrTicket(json.getInteger("I_DR_TICKET"));
        setIInsideDays(json.getInteger("I_INSIDE_DAYS"));
        setIInsidePersons(json.getInteger("I_INSIDE_PERSONS"));
        setILhTicket(json.getInteger("I_LH_TICKET"));
        setIQuantity(json.getInteger("I_QUANTITY"));
        setIRcounter(json.getInteger("I_RCOUNTER"));
        setISpTicket(json.getInteger("I_SP_TICKET"));
        setRCodeCommissionId(json.getLong("R_CODE_COMMISSION_ID"));
        setRCodeGroupId(json.getLong("R_CODE_GROUP_ID"));
        setRCodePriceId(json.getLong("R_CODE_PRICE_ID"));
        setROrderId(json.getString("R_ORDER_ID"));
        setRRoomTypeId(json.getLong("R_ROOM_TYPE_ID"));
        setIsBrekker(json.getBoolean("IS_BREKKER"));
        setIsPos(json.getBoolean("IS_POS"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_ACTUAL!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_PRICE!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_TOTAL!
        // Omitting unrecognized type java.time.LocalDateTime for column D_ARRIVE_TIME!
        // Omitting unrecognized type java.math.BigDecimal for column D_BREKKER_PRICE!
        // Omitting unrecognized type java.math.BigDecimal for column D_DISCOUNT!
        // Omitting unrecognized type java.time.LocalDateTime for column D_LEAVE_TIME!
        json.put("S_CODE",getSCode());
        json.put("S_SERIAL",getSSerial());
        json.put("J_CONFIG",getJConfig());
        json.put("I_BK_TICKET",getIBkTicket());
        json.put("I_DR_TICKET",getIDrTicket());
        json.put("I_INSIDE_DAYS",getIInsideDays());
        json.put("I_INSIDE_PERSONS",getIInsidePersons());
        json.put("I_LH_TICKET",getILhTicket());
        json.put("I_QUANTITY",getIQuantity());
        json.put("I_RCOUNTER",getIRcounter());
        json.put("I_SP_TICKET",getISpTicket());
        json.put("R_CODE_COMMISSION_ID",getRCodeCommissionId());
        json.put("R_CODE_GROUP_ID",getRCodeGroupId());
        json.put("R_CODE_PRICE_ID",getRCodePriceId());
        json.put("R_ORDER_ID",getROrderId());
        json.put("R_ROOM_TYPE_ID",getRRoomTypeId());
        json.put("IS_BREKKER",getIsBrekker());
        json.put("IS_POS",getIsPos());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
