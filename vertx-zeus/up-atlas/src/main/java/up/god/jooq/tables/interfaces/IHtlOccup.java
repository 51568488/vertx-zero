/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IHtlOccup extends Serializable {

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.PK_ID</code>. uniqueId,PK_ID
     */
    public IHtlOccup setPkId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.PK_ID</code>. uniqueId,PK_ID
     */
    public Long getPkId();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.D_INCP_TIME</code>. inoccupTime,D_INCP_TIME
     */
    public IHtlOccup setDIncpTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.D_INCP_TIME</code>. inoccupTime,D_INCP_TIME
     */
    public LocalDateTime getDIncpTime();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.T_PREFERENCE</code>. preference,T_PREFERENCE
     */
    public IHtlOccup setTPreference(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.T_PREFERENCE</code>. preference,T_PREFERENCE
     */
    public String getTPreference();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.T_REQUEST</code>. request,T_REQUEST
     */
    public IHtlOccup setTRequest(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.T_REQUEST</code>. request,T_REQUEST
     */
    public String getTRequest();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.V_HOTEL_ID</code>. hotelId,V_HOTEL_ID
     */
    public IHtlOccup setVHotelId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.V_HOTEL_ID</code>. hotelId,V_HOTEL_ID
     */
    public Long getVHotelId();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.V_SCHEDULE_ID</code>. scheduleId,V_SCHEDULE_ID
     */
    public IHtlOccup setVScheduleId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.V_SCHEDULE_ID</code>. scheduleId,V_SCHEDULE_ID
     */
    public Long getVScheduleId();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.S_CODE</code>. code,S_CODE
     */
    public IHtlOccup setSCode(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.S_CAR_PLATE</code>. carPlate,S_CAR_PLATE
     */
    public IHtlOccup setSCarPlate(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.S_CAR_PLATE</code>. carPlate,S_CAR_PLATE
     */
    public String getSCarPlate();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.S_OPERATOR</code>. operator,S_OPERATOR
     */
    public IHtlOccup setSOperator(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.S_OPERATOR</code>. operator,S_OPERATOR
     */
    public String getSOperator();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.S_ROOM_NUM</code>. roomNumber,S_ROOM_NUM
     */
    public IHtlOccup setSRoomNum(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.S_ROOM_NUM</code>. roomNumber,S_ROOM_NUM
     */
    public String getSRoomNum();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.S_SERIAL</code>. serial,S_SERIAL
     */
    public IHtlOccup setSSerial(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.S_SERIAL</code>. serial,S_SERIAL
     */
    public String getSSerial();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.J_CONFIG</code>. config,J_CONFIG
     */
    public IHtlOccup setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.I_CARD_COUNTER</code>. cardCounter,I_CARD_COUNTER
     */
    public IHtlOccup setICardCounter(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.I_CARD_COUNTER</code>. cardCounter,I_CARD_COUNTER
     */
    public Integer getICardCounter();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.I_INSIDE_DAYS</code>. insideDays,I_INSIDE_DAYS
     */
    public IHtlOccup setIInsideDays(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.I_INSIDE_DAYS</code>. insideDays,I_INSIDE_DAYS
     */
    public Integer getIInsideDays();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.I_INSIDE_PERSONS</code>. insidePersons,I_INSIDE_PERSONS
     */
    public IHtlOccup setIInsidePersons(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.I_INSIDE_PERSONS</code>. insidePersons,I_INSIDE_PERSONS
     */
    public Integer getIInsidePersons();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.RLT_OCCUP_STATUS</code>. status,RLT_OCCUP_STATUS
     */
    public IHtlOccup setRltOccupStatus(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.RLT_OCCUP_STATUS</code>. status,RLT_OCCUP_STATUS
     */
    public Long getRltOccupStatus();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.RLT_OCCUP_TYPE</code>. type,RLT_OCCUP_TYPE
     */
    public IHtlOccup setRltOccupType(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.RLT_OCCUP_TYPE</code>. type,RLT_OCCUP_TYPE
     */
    public Long getRltOccupType();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.R_ORDER_ID</code>. orderId,R_ORDER_ID
     */
    public IHtlOccup setROrderId(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.R_ORDER_ID</code>. orderId,R_ORDER_ID
     */
    public String getROrderId();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.R_TRAVELER_ID</code>. travelerId,R_TRAVELER_ID
     */
    public IHtlOccup setRTravelerId(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.R_TRAVELER_ID</code>. travelerId,R_TRAVELER_ID
     */
    public String getRTravelerId();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.IS_SECRET</code>. secret,IS_SECRET
     */
    public IHtlOccup setIsSecret(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.IS_SECRET</code>. secret,IS_SECRET
     */
    public Boolean getIsSecret();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IHtlOccup setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IHtlOccup setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IHtlOccup setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IHtlOccup setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IHtlOccup setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IHtlOccup setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.HTL_OCCUP.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IHtlOccup setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_OCCUP.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IHtlOccup
     */
    public void from(up.god.jooq.tables.interfaces.IHtlOccup from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IHtlOccup
     */
    public <E extends up.god.jooq.tables.interfaces.IHtlOccup> E into(E into);

    default IHtlOccup fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getLong("PK_ID"));
        // Omitting unrecognized type java.time.LocalDateTime for column D_INCP_TIME!
        setTPreference(json.getString("T_PREFERENCE"));
        setTRequest(json.getString("T_REQUEST"));
        setVHotelId(json.getLong("V_HOTEL_ID"));
        setVScheduleId(json.getLong("V_SCHEDULE_ID"));
        setSCode(json.getString("S_CODE"));
        setSCarPlate(json.getString("S_CAR_PLATE"));
        setSOperator(json.getString("S_OPERATOR"));
        setSRoomNum(json.getString("S_ROOM_NUM"));
        setSSerial(json.getString("S_SERIAL"));
        setJConfig(json.getString("J_CONFIG"));
        setICardCounter(json.getInteger("I_CARD_COUNTER"));
        setIInsideDays(json.getInteger("I_INSIDE_DAYS"));
        setIInsidePersons(json.getInteger("I_INSIDE_PERSONS"));
        setRltOccupStatus(json.getLong("RLT_OCCUP_STATUS"));
        setRltOccupType(json.getLong("RLT_OCCUP_TYPE"));
        setROrderId(json.getString("R_ORDER_ID"));
        setRTravelerId(json.getString("R_TRAVELER_ID"));
        setIsSecret(json.getBoolean("IS_SECRET"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.time.LocalDateTime for column D_INCP_TIME!
        json.put("T_PREFERENCE",getTPreference());
        json.put("T_REQUEST",getTRequest());
        json.put("V_HOTEL_ID",getVHotelId());
        json.put("V_SCHEDULE_ID",getVScheduleId());
        json.put("S_CODE",getSCode());
        json.put("S_CAR_PLATE",getSCarPlate());
        json.put("S_OPERATOR",getSOperator());
        json.put("S_ROOM_NUM",getSRoomNum());
        json.put("S_SERIAL",getSSerial());
        json.put("J_CONFIG",getJConfig());
        json.put("I_CARD_COUNTER",getICardCounter());
        json.put("I_INSIDE_DAYS",getIInsideDays());
        json.put("I_INSIDE_PERSONS",getIInsidePersons());
        json.put("RLT_OCCUP_STATUS",getRltOccupStatus());
        json.put("RLT_OCCUP_TYPE",getRltOccupType());
        json.put("R_ORDER_ID",getROrderId());
        json.put("R_TRAVELER_ID",getRTravelerId());
        json.put("IS_SECRET",getIsSecret());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
