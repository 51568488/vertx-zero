/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.SecResourceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecResource extends TableImpl<SecResourceRecord> {

    private static final long serialVersionUID = -938038937;

    /**
     * The reference instance of <code>DB_HTL.SEC_RESOURCE</code>
     */
    public static final SecResource SEC_RESOURCE = new SecResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecResourceRecord> getRecordType() {
        return SecResourceRecord.class;
    }

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<SecResourceRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.T_PROJECTION</code>. projection,T_PROJECTION
     */
    public final TableField<SecResourceRecord, String> T_PROJECTION = createField("T_PROJECTION", org.jooq.impl.SQLDataType.CLOB, this, "projection,T_PROJECTION");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.T_QUERY</code>. query,T_QUERY
     */
    public final TableField<SecResourceRecord, String> T_QUERY = createField("T_QUERY", org.jooq.impl.SQLDataType.CLOB, this, "query,T_QUERY");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.V_URL_ID</code>. urlId,V_URL_ID
     */
    public final TableField<SecResourceRecord, String> V_URL_ID = createField("V_URL_ID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "urlId,V_URL_ID");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.S_CODE</code>. code,S_CODE
     */
    public final TableField<SecResourceRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.S_IDENTIFIER</code>. identifier,S_IDENTIFIER
     */
    public final TableField<SecResourceRecord, String> S_IDENTIFIER = createField("S_IDENTIFIER", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "identifier,S_IDENTIFIER");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.S_OBJ_ID</code>. objectId,S_OBJ_ID
     */
    public final TableField<SecResourceRecord, String> S_OBJ_ID = createField("S_OBJ_ID", org.jooq.impl.SQLDataType.VARCHAR(64), this, "objectId,S_OBJ_ID");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.S_OBJ_TABLE</code>. object,S_OBJ_TABLE
     */
    public final TableField<SecResourceRecord, String> S_OBJ_TABLE = createField("S_OBJ_TABLE", org.jooq.impl.SQLDataType.VARCHAR(64), this, "object,S_OBJ_TABLE");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<SecResourceRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.J_PARAMS</code>. params,J_PARAMS
     */
    public final TableField<SecResourceRecord, String> J_PARAMS = createField("J_PARAMS", org.jooq.impl.SQLDataType.CLOB, this, "params,J_PARAMS");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<SecResourceRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<SecResourceRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<SecResourceRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<SecResourceRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<SecResourceRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<SecResourceRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.SEC_RESOURCE.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<SecResourceRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.SEC_RESOURCE</code> table reference
     */
    public SecResource() {
        this(DSL.name("SEC_RESOURCE"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.SEC_RESOURCE</code> table reference
     */
    public SecResource(String alias) {
        this(DSL.name(alias), SEC_RESOURCE);
    }

    /**
     * Create an aliased <code>DB_HTL.SEC_RESOURCE</code> table reference
     */
    public SecResource(Name alias) {
        this(alias, SEC_RESOURCE);
    }

    private SecResource(Name alias, Table<SecResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecResource(Name alias, Table<SecResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SEC_RESOURCE_PRIMARY, Indexes.SEC_RESOURCE_UK_SEC_RESOURCE_S_CODE_Z_SIGMA, Indexes.SEC_RESOURCE_UK_SEC_RESOURCE_S_IDENTIFIER_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SecResourceRecord> getPrimaryKey() {
        return Keys.KEY_SEC_RESOURCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SecResourceRecord>> getKeys() {
        return Arrays.<UniqueKey<SecResourceRecord>>asList(Keys.KEY_SEC_RESOURCE_PRIMARY, Keys.KEY_SEC_RESOURCE_UK_SEC_RESOURCE_S_CODE_Z_SIGMA, Keys.KEY_SEC_RESOURCE_UK_SEC_RESOURCE_S_IDENTIFIER_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SecResource as(String alias) {
        return new SecResource(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SecResource as(Name alias) {
        return new SecResource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecResource rename(String name) {
        return new SecResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecResource rename(Name name) {
        return new SecResource(name, null);
    }
}
