/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.ResCardRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResCard extends TableImpl<ResCardRecord> {

    private static final long serialVersionUID = -1325057805;

    /**
     * The reference instance of <code>DB_HTL.RES_CARD</code>
     */
    public static final ResCard RES_CARD = new ResCard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResCardRecord> getRecordType() {
        return ResCardRecord.class;
    }

    /**
     * The column <code>DB_HTL.RES_CARD.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<ResCardRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.RES_CARD.D_AMOUNT</code>. 卡余额,amount,D_AMOUNT
     */
    public final TableField<ResCardRecord, BigDecimal> D_AMOUNT = createField("D_AMOUNT", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "卡余额,amount,D_AMOUNT");

    /**
     * The column <code>DB_HTL.RES_CARD.D_EXPIRED_TIME</code>. 过期时间,expiredTime,D_EXPIRED_TIME
     */
    public final TableField<ResCardRecord, LocalDateTime> D_EXPIRED_TIME = createField("D_EXPIRED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "过期时间,expiredTime,D_EXPIRED_TIME");

    /**
     * The column <code>DB_HTL.RES_CARD.L_POINT</code>. 积分,point,L_POINT
     */
    public final TableField<ResCardRecord, Long> L_POINT = createField("L_POINT", org.jooq.impl.SQLDataType.BIGINT, this, "积分,point,L_POINT");

    /**
     * The column <code>DB_HTL.RES_CARD.S_CODE</code>. code,S_CODE
     */
    public final TableField<ResCardRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.RES_CARD.S_BATCH</code>. 批次,batch,S_BATCH
     */
    public final TableField<ResCardRecord, String> S_BATCH = createField("S_BATCH", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "批次,batch,S_BATCH");

    /**
     * The column <code>DB_HTL.RES_CARD.S_NUMBER</code>. 卡号,number,S_NUMBER
     */
    public final TableField<ResCardRecord, String> S_NUMBER = createField("S_NUMBER", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "卡号,number,S_NUMBER");

    /**
     * The column <code>DB_HTL.RES_CARD.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<ResCardRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.RES_CARD.RLT_CARD_TYPE</code>. 类型,cardType,RLT_CARD_TYPE
     */
    public final TableField<ResCardRecord, Long> RLT_CARD_TYPE = createField("RLT_CARD_TYPE", org.jooq.impl.SQLDataType.BIGINT, this, "类型,cardType,RLT_CARD_TYPE");

    /**
     * The column <code>DB_HTL.RES_CARD.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public final TableField<ResCardRecord, String> R_MEMBER_ID = createField("R_MEMBER_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "memberId,R_MEMBER_ID");

    /**
     * The column <code>DB_HTL.RES_CARD.IS_MAJOR</code>. 主卡,major,IS_MAJOR
     */
    public final TableField<ResCardRecord, Boolean> IS_MAJOR = createField("IS_MAJOR", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "主卡,major,IS_MAJOR");

    /**
     * The column <code>DB_HTL.RES_CARD.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<ResCardRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.RES_CARD.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<ResCardRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.RES_CARD.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<ResCardRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.RES_CARD.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<ResCardRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.RES_CARD.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<ResCardRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.RES_CARD.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<ResCardRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.RES_CARD.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<ResCardRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.RES_CARD</code> table reference
     */
    public ResCard() {
        this(DSL.name("RES_CARD"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.RES_CARD</code> table reference
     */
    public ResCard(String alias) {
        this(DSL.name(alias), RES_CARD);
    }

    /**
     * Create an aliased <code>DB_HTL.RES_CARD</code> table reference
     */
    public ResCard(Name alias) {
        this(alias, RES_CARD);
    }

    private ResCard(Name alias, Table<ResCardRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResCard(Name alias, Table<ResCardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RES_CARD_FK_RES_CARD_R_MEMBER_ID, Indexes.RES_CARD_PRIMARY, Indexes.RES_CARD_UK_RES_CARD_S_CODE_Z_SIGMA, Indexes.RES_CARD_UK_RES_CARD_S_NUMBER_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResCardRecord> getPrimaryKey() {
        return Keys.KEY_RES_CARD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResCardRecord>> getKeys() {
        return Arrays.<UniqueKey<ResCardRecord>>asList(Keys.KEY_RES_CARD_PRIMARY, Keys.KEY_RES_CARD_UK_RES_CARD_S_CODE_Z_SIGMA, Keys.KEY_RES_CARD_UK_RES_CARD_S_NUMBER_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResCard as(String alias) {
        return new ResCard(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResCard as(Name alias) {
        return new ResCard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResCard rename(String name) {
        return new ResCard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResCard rename(Name name) {
        return new ResCard(name, null);
    }
}
