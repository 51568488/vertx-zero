/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.SysActivityLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysActivityLog extends TableImpl<SysActivityLogRecord> {

    private static final long serialVersionUID = 495344967;

    /**
     * The reference instance of <code>DB_HTL.SYS_ACTIVITY_LOG</code>
     */
    public static final SysActivityLog SYS_ACTIVITY_LOG = new SysActivityLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysActivityLogRecord> getRecordType() {
        return SysActivityLogRecord.class;
    }

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<SysActivityLogRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.D_LOG_TIME</code>. 操作时间,logTime,D_LOG_TIME
     */
    public final TableField<SysActivityLogRecord, LocalDateTime> D_LOG_TIME = createField("D_LOG_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "操作时间,logTime,D_LOG_TIME");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.T_DESCRIPTION</code>. 系统登陆日志,description,T_DESCRIPTION
     */
    public final TableField<SysActivityLogRecord, String> T_DESCRIPTION = createField("T_DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "系统登陆日志,description,T_DESCRIPTION");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.S_CODE</code>. code,S_CODE
     */
    public final TableField<SysActivityLogRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.S_IP</code>. 登陆IP,ip,S_IP
     */
    public final TableField<SysActivityLogRecord, String> S_IP = createField("S_IP", org.jooq.impl.SQLDataType.VARCHAR(16), this, "登陆IP,ip,S_IP");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.S_MENU</code>. 操作菜单，记录操作位置,menu,S_MENU
     */
    public final TableField<SysActivityLogRecord, String> S_MENU = createField("S_MENU", org.jooq.impl.SQLDataType.VARCHAR(128), this, "操作菜单，记录操作位置,menu,S_MENU");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.S_OPERATOR</code>. 系统登陆者,operator,S_OPERATOR
     */
    public final TableField<SysActivityLogRecord, String> S_OPERATOR = createField("S_OPERATOR", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "系统登陆者,operator,S_OPERATOR");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<SysActivityLogRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<SysActivityLogRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<SysActivityLogRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<SysActivityLogRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<SysActivityLogRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<SysActivityLogRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<SysActivityLogRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.SYS_ACTIVITY_LOG.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<SysActivityLogRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.SYS_ACTIVITY_LOG</code> table reference
     */
    public SysActivityLog() {
        this(DSL.name("SYS_ACTIVITY_LOG"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.SYS_ACTIVITY_LOG</code> table reference
     */
    public SysActivityLog(String alias) {
        this(DSL.name(alias), SYS_ACTIVITY_LOG);
    }

    /**
     * Create an aliased <code>DB_HTL.SYS_ACTIVITY_LOG</code> table reference
     */
    public SysActivityLog(Name alias) {
        this(alias, SYS_ACTIVITY_LOG);
    }

    private SysActivityLog(Name alias, Table<SysActivityLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysActivityLog(Name alias, Table<SysActivityLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_ACTIVITY_LOG_PRIMARY, Indexes.SYS_ACTIVITY_LOG_UK_SYS_ACTIVITY_LOG_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysActivityLogRecord> getPrimaryKey() {
        return Keys.KEY_SYS_ACTIVITY_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysActivityLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SysActivityLogRecord>>asList(Keys.KEY_SYS_ACTIVITY_LOG_PRIMARY, Keys.KEY_SYS_ACTIVITY_LOG_UK_SYS_ACTIVITY_LOG_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysActivityLog as(String alias) {
        return new SysActivityLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysActivityLog as(Name alias) {
        return new SysActivityLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysActivityLog rename(String name) {
        return new SysActivityLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysActivityLog rename(Name name) {
        return new SysActivityLog(name, null);
    }
}
