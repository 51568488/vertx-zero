/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.future.VertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import up.god.jooq.tables.PsiRepository;
import up.god.jooq.tables.records.PsiRepositoryRecord;


import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsiRepositoryDao extends DAOImpl<PsiRepositoryRecord, up.god.jooq.tables.pojos.PsiRepository, Long> implements VertxDAO<up.god.jooq.tables.records.PsiRepositoryRecord,up.god.jooq.tables.pojos.PsiRepository,java.lang.Long> {

    /**
     * Create a new PsiRepositoryDao without any configuration
     */
    public PsiRepositoryDao() {
        super(PsiRepository.PSI_REPOSITORY, up.god.jooq.tables.pojos.PsiRepository.class);
    }

    /**
     * Create a new PsiRepositoryDao with an attached configuration
     */
    public PsiRepositoryDao(Configuration configuration) {
        super(PsiRepository.PSI_REPOSITORY, up.god.jooq.tables.pojos.PsiRepository.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(up.god.jooq.tables.pojos.PsiRepository object) {
        return object.getPkId();
    }

    /**
     * Fetch records that have <code>PK_ID IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByPkId(Long... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.PK_ID, values);
    }

    /**
     * Fetch a unique record that has <code>PK_ID = value</code>
     */
    public up.god.jooq.tables.pojos.PsiRepository fetchOneByPkId(Long value) {
        return fetchOne(PsiRepository.PSI_REPOSITORY.PK_ID, value);
    }

    /**
     * Fetch records that have <code>D_EXPIRED_TIME IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByDExpiredTime(LocalDateTime... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.D_EXPIRED_TIME, values);
    }

    /**
     * Fetch records that have <code>D_PRODUCE_TIME IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByDProduceTime(LocalDateTime... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.D_PRODUCE_TIME, values);
    }

    /**
     * Fetch records that have <code>T_COMMENT IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByTComment(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.T_COMMENT, values);
    }

    /**
     * Fetch records that have <code>V_MERCHANDISE_ID IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByVMerchandiseId(Long... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.V_MERCHANDISE_ID, values);
    }

    /**
     * Fetch records that have <code>S_NAME IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchBySName(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.S_NAME, values);
    }

    /**
     * Fetch records that have <code>S_CODE IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchBySCode(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.S_CODE, values);
    }

    /**
     * Fetch records that have <code>S_WAREHOUSE IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchBySWarehouse(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.S_WAREHOUSE, values);
    }

    /**
     * Fetch records that have <code>J_CONFIG IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByJConfig(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.J_CONFIG, values);
    }

    /**
     * Fetch records that have <code>I_QTY_BROKEN IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByIQtyBroken(Integer... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.I_QTY_BROKEN, values);
    }

    /**
     * Fetch records that have <code>I_QTY_LEFT IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByIQtyLeft(Integer... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.I_QTY_LEFT, values);
    }

    /**
     * Fetch records that have <code>I_QTY_LIMIT IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByIQtyLimit(Integer... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.I_QTY_LIMIT, values);
    }

    /**
     * Fetch records that have <code>I_QTY_TAKEN IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByIQtyTaken(Integer... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.I_QTY_TAKEN, values);
    }

    /**
     * Fetch records that have <code>R_UBICATION_ID IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByRUbicationId(Long... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.R_UBICATION_ID, values);
    }

    /**
     * Fetch records that have <code>IS_REJECT IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByIsReject(Boolean... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.IS_REJECT, values);
    }

    /**
     * Fetch records that have <code>IS_SCRAP IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByIsScrap(Boolean... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.IS_SCRAP, values);
    }

    /**
     * Fetch records that have <code>IS_ACTIVE IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByIsActive(Boolean... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.IS_ACTIVE, values);
    }

    /**
     * Fetch records that have <code>Z_SIGMA IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByZSigma(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.Z_SIGMA, values);
    }

    /**
     * Fetch records that have <code>Z_LANGUAGE IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByZLanguage(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.Z_LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_BY IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByZCreateBy(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.Z_CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_TIME IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByZCreateTime(LocalDateTime... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.Z_CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_BY IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByZUpdateBy(String... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.Z_UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_TIME IN (values)</code>
     */
    public List<up.god.jooq.tables.pojos.PsiRepository> fetchByZUpdateTime(LocalDateTime... values) {
        return fetch(PsiRepository.PSI_REPOSITORY.Z_UPDATE_TIME, values);
    }

    /**
     * Fetch records that have <code>PK_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByPkIdAsync(List<Long> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.PK_ID,values);
    }

    /**
     * Fetch a unique record that has <code>PK_ID = value</code> asynchronously
     */
    public CompletableFuture<up.god.jooq.tables.pojos.PsiRepository> fetchOneByPkIdAsync(Long value) {
        return FutureTool.executeBlocking(h->h.complete(fetchOneByPkId(value)),vertx());
    }

    /**
     * Fetch records that have <code>D_EXPIRED_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByDExpiredTimeAsync(List<LocalDateTime> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.D_EXPIRED_TIME,values);
    }

    /**
     * Fetch records that have <code>D_PRODUCE_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByDProduceTimeAsync(List<LocalDateTime> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.D_PRODUCE_TIME,values);
    }

    /**
     * Fetch records that have <code>T_COMMENT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByTCommentAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.T_COMMENT,values);
    }

    /**
     * Fetch records that have <code>V_MERCHANDISE_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByVMerchandiseIdAsync(List<Long> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.V_MERCHANDISE_ID,values);
    }

    /**
     * Fetch records that have <code>S_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchBySNameAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.S_NAME,values);
    }

    /**
     * Fetch records that have <code>S_CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchBySCodeAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.S_CODE,values);
    }

    /**
     * Fetch records that have <code>S_WAREHOUSE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchBySWarehouseAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.S_WAREHOUSE,values);
    }

    /**
     * Fetch records that have <code>J_CONFIG IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByJConfigAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.J_CONFIG,values);
    }

    /**
     * Fetch records that have <code>I_QTY_BROKEN IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByIQtyBrokenAsync(List<Integer> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.I_QTY_BROKEN,values);
    }

    /**
     * Fetch records that have <code>I_QTY_LEFT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByIQtyLeftAsync(List<Integer> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.I_QTY_LEFT,values);
    }

    /**
     * Fetch records that have <code>I_QTY_LIMIT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByIQtyLimitAsync(List<Integer> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.I_QTY_LIMIT,values);
    }

    /**
     * Fetch records that have <code>I_QTY_TAKEN IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByIQtyTakenAsync(List<Integer> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.I_QTY_TAKEN,values);
    }

    /**
     * Fetch records that have <code>R_UBICATION_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByRUbicationIdAsync(List<Long> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.R_UBICATION_ID,values);
    }

    /**
     * Fetch records that have <code>IS_REJECT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByIsRejectAsync(List<Boolean> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.IS_REJECT,values);
    }

    /**
     * Fetch records that have <code>IS_SCRAP IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByIsScrapAsync(List<Boolean> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.IS_SCRAP,values);
    }

    /**
     * Fetch records that have <code>IS_ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByIsActiveAsync(List<Boolean> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.IS_ACTIVE,values);
    }

    /**
     * Fetch records that have <code>Z_SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByZSigmaAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.Z_SIGMA,values);
    }

    /**
     * Fetch records that have <code>Z_LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByZLanguageAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.Z_LANGUAGE,values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByZCreateByAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.Z_CREATE_BY,values);
    }

    /**
     * Fetch records that have <code>Z_CREATE_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByZCreateTimeAsync(List<LocalDateTime> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.Z_CREATE_TIME,values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByZUpdateByAsync(List<String> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.Z_UPDATE_BY,values);
    }

    /**
     * Fetch records that have <code>Z_UPDATE_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<up.god.jooq.tables.pojos.PsiRepository>> fetchByZUpdateTimeAsync(List<LocalDateTime> values) {
        return fetchAsync(PsiRepository.PSI_REPOSITORY.Z_UPDATE_TIME,values);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
