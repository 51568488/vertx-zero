/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IHtlTraveler extends Serializable {

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.PK_ID</code>. uniqueId,PK_ID
     */
    public IHtlTraveler setPkId(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.PK_ID</code>. uniqueId,PK_ID
     */
    public String getPkId();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.D_BIRTHDAY</code>. birthday,D_BIRTHDAY
     */
    public IHtlTraveler setDBirthday(LocalDate value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.D_BIRTHDAY</code>. birthday,D_BIRTHDAY
     */
    public LocalDate getDBirthday();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.T_ADDRESS</code>. address,T_ADDRESS
     */
    public IHtlTraveler setTAddress(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.T_ADDRESS</code>. address,T_ADDRESS
     */
    public String getTAddress();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.V_HOTEL_ID</code>. hotelId,V_HOTEL_ID
     */
    public IHtlTraveler setVHotelId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.V_HOTEL_ID</code>. hotelId,V_HOTEL_ID
     */
    public Long getVHotelId();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_CODE</code>. code,S_CODE
     */
    public IHtlTraveler setSCode(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_COUNTRY</code>. country,S_COUNTRY
     */
    public IHtlTraveler setSCountry(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_COUNTRY</code>. country,S_COUNTRY
     */
    public String getSCountry();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_DRIVER_LIC</code>. driverLicense,S_DRIVER_LIC
     */
    public IHtlTraveler setSDriverLic(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_DRIVER_LIC</code>. driverLicense,S_DRIVER_LIC
     */
    public String getSDriverLic();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_IDC_NUM</code>. idcNumber,S_IDC_NUM
     */
    public IHtlTraveler setSIdcNum(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_IDC_NUM</code>. idcNumber,S_IDC_NUM
     */
    public String getSIdcNum();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_MOBILE</code>. mobile,S_MOBILE
     */
    public IHtlTraveler setSMobile(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_MOBILE</code>. mobile,S_MOBILE
     */
    public String getSMobile();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_NATION</code>. nation,S_NATION
     */
    public IHtlTraveler setSNation(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_NATION</code>. nation,S_NATION
     */
    public String getSNation();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_NICKNAME</code>. nickname,S_NICKNAME
     */
    public IHtlTraveler setSNickname(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_NICKNAME</code>. nickname,S_NICKNAME
     */
    public String getSNickname();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_NTV_PLACE</code>. nativePlace,S_NTV_PLACE
     */
    public IHtlTraveler setSNtvPlace(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_NTV_PLACE</code>. nativePlace,S_NTV_PLACE
     */
    public String getSNtvPlace();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_REALNAME</code>. realname,S_REALNAME
     */
    public IHtlTraveler setSRealname(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_REALNAME</code>. realname,S_REALNAME
     */
    public String getSRealname();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.S_SERIAL</code>. serial,S_SERIAL
     */
    public IHtlTraveler setSSerial(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.S_SERIAL</code>. serial,S_SERIAL
     */
    public String getSSerial();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.J_CONFIG</code>. config,J_CONFIG
     */
    public IHtlTraveler setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.I_INOCCUPS</code>. inoccups,I_INOCCUPS
     */
    public IHtlTraveler setIInoccups(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.I_INOCCUPS</code>. inoccups,I_INOCCUPS
     */
    public Integer getIInoccups();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.RLT_IDC_TYPE</code>. idcType,RLT_IDC_TYPE
     */
    public IHtlTraveler setRltIdcType(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.RLT_IDC_TYPE</code>. idcType,RLT_IDC_TYPE
     */
    public Long getRltIdcType();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.RLT_TRAVELER_STATUS</code>. status,RLT_TRAVELER_STATUS
     */
    public IHtlTraveler setRltTravelerStatus(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.RLT_TRAVELER_STATUS</code>. status,RLT_TRAVELER_STATUS
     */
    public Long getRltTravelerStatus();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.R_OPERATOR_ID</code>. operator,R_OPERATOR_ID
     */
    public IHtlTraveler setROperatorId(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.R_OPERATOR_ID</code>. operator,R_OPERATOR_ID
     */
    public String getROperatorId();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.IS_MALE</code>. male,IS_MALE
     */
    public IHtlTraveler setIsMale(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.IS_MALE</code>. male,IS_MALE
     */
    public Boolean getIsMale();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.IS_UPLOADED</code>. uploaded,IS_UPLOADED
     */
    public IHtlTraveler setIsUploaded(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.IS_UPLOADED</code>. uploaded,IS_UPLOADED
     */
    public Boolean getIsUploaded();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IHtlTraveler setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IHtlTraveler setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IHtlTraveler setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IHtlTraveler setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IHtlTraveler setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IHtlTraveler setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.HTL_TRAVELER.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IHtlTraveler setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_TRAVELER.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IHtlTraveler
     */
    public void from(up.god.jooq.tables.interfaces.IHtlTraveler from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IHtlTraveler
     */
    public <E extends up.god.jooq.tables.interfaces.IHtlTraveler> E into(E into);

    default IHtlTraveler fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getString("PK_ID"));
        // Omitting unrecognized type java.time.LocalDate for column D_BIRTHDAY!
        setTAddress(json.getString("T_ADDRESS"));
        setVHotelId(json.getLong("V_HOTEL_ID"));
        setSCode(json.getString("S_CODE"));
        setSCountry(json.getString("S_COUNTRY"));
        setSDriverLic(json.getString("S_DRIVER_LIC"));
        setSIdcNum(json.getString("S_IDC_NUM"));
        setSMobile(json.getString("S_MOBILE"));
        setSNation(json.getString("S_NATION"));
        setSNickname(json.getString("S_NICKNAME"));
        setSNtvPlace(json.getString("S_NTV_PLACE"));
        setSRealname(json.getString("S_REALNAME"));
        setSSerial(json.getString("S_SERIAL"));
        setJConfig(json.getString("J_CONFIG"));
        setIInoccups(json.getInteger("I_INOCCUPS"));
        setRltIdcType(json.getLong("RLT_IDC_TYPE"));
        setRltTravelerStatus(json.getLong("RLT_TRAVELER_STATUS"));
        setROperatorId(json.getString("R_OPERATOR_ID"));
        setIsMale(json.getBoolean("IS_MALE"));
        setIsUploaded(json.getBoolean("IS_UPLOADED"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.time.LocalDate for column D_BIRTHDAY!
        json.put("T_ADDRESS",getTAddress());
        json.put("V_HOTEL_ID",getVHotelId());
        json.put("S_CODE",getSCode());
        json.put("S_COUNTRY",getSCountry());
        json.put("S_DRIVER_LIC",getSDriverLic());
        json.put("S_IDC_NUM",getSIdcNum());
        json.put("S_MOBILE",getSMobile());
        json.put("S_NATION",getSNation());
        json.put("S_NICKNAME",getSNickname());
        json.put("S_NTV_PLACE",getSNtvPlace());
        json.put("S_REALNAME",getSRealname());
        json.put("S_SERIAL",getSSerial());
        json.put("J_CONFIG",getJConfig());
        json.put("I_INOCCUPS",getIInoccups());
        json.put("RLT_IDC_TYPE",getRltIdcType());
        json.put("RLT_TRAVELER_STATUS",getRltTravelerStatus());
        json.put("R_OPERATOR_ID",getROperatorId());
        json.put("IS_MALE",getIsMale());
        json.put("IS_UPLOADED",getIsUploaded());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
