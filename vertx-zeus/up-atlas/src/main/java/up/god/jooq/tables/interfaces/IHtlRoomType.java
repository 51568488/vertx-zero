/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IHtlRoomType extends Serializable {

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.PK_ID</code>. uniqueId,PK_ID
     */
    public IHtlRoomType setPkId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.PK_ID</code>. uniqueId,PK_ID
     */
    public Long getPkId();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.D_PRICE</code>. 挂牌价,price,D_PRICE
     */
    public IHtlRoomType setDPrice(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.D_PRICE</code>. 挂牌价,price,D_PRICE
     */
    public BigDecimal getDPrice();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.S_NAME</code>. name,S_NAME
     */
    public IHtlRoomType setSName(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.S_NAME</code>. name,S_NAME
     */
    public String getSName();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.S_CODE</code>. code,S_CODE
     */
    public IHtlRoomType setSCode(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.S_HELP_CODE</code>. helpCode,S_HELP_CODE
     */
    public IHtlRoomType setSHelpCode(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.S_HELP_CODE</code>. helpCode,S_HELP_CODE
     */
    public String getSHelpCode();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.J_CONFIG</code>. config,J_CONFIG
     */
    public IHtlRoomType setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.I_BK_TICKET</code>. brekkerTicket,I_BK_TICKET
     */
    public IHtlRoomType setIBkTicket(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.I_BK_TICKET</code>. brekkerTicket,I_BK_TICKET
     */
    public Integer getIBkTicket();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.I_EXCEED</code>. 可超预定数量,exceed,I_EXCEED
     */
    public IHtlRoomType setIExceed(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.I_EXCEED</code>. 可超预定数量,exceed,I_EXCEED
     */
    public Integer getIExceed();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.I_LH_TICKET</code>. lunchTicket,I_LH_TICKET
     */
    public IHtlRoomType setILhTicket(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.I_LH_TICKET</code>. lunchTicket,I_LH_TICKET
     */
    public Integer getILhTicket();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.I_ORDER</code>. order,I_ORDER
     */
    public IHtlRoomType setIOrder(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.I_ORDER</code>. order,I_ORDER
     */
    public Integer getIOrder();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.I_PERSON</code>. 可住人数,person,I_PERSON
     */
    public IHtlRoomType setIPerson(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.I_PERSON</code>. 可住人数,person,I_PERSON
     */
    public Integer getIPerson();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.I_SP_TICKET</code>. supperTicket,I_SP_TICKET
     */
    public IHtlRoomType setISpTicket(Integer value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.I_SP_TICKET</code>. supperTicket,I_SP_TICKET
     */
    public Integer getISpTicket();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.R_HOTEL_ID</code>. hotelId,R_HOTEL_ID
     */
    public IHtlRoomType setRHotelId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.R_HOTEL_ID</code>. hotelId,R_HOTEL_ID
     */
    public Long getRHotelId();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IHtlRoomType setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IHtlRoomType setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IHtlRoomType setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IHtlRoomType setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IHtlRoomType setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IHtlRoomType setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.HTL_ROOM_TYPE.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IHtlRoomType setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ROOM_TYPE.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IHtlRoomType
     */
    public void from(up.god.jooq.tables.interfaces.IHtlRoomType from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IHtlRoomType
     */
    public <E extends up.god.jooq.tables.interfaces.IHtlRoomType> E into(E into);

    default IHtlRoomType fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getLong("PK_ID"));
        // Omitting unrecognized type java.math.BigDecimal for column D_PRICE!
        setSName(json.getString("S_NAME"));
        setSCode(json.getString("S_CODE"));
        setSHelpCode(json.getString("S_HELP_CODE"));
        setJConfig(json.getString("J_CONFIG"));
        setIBkTicket(json.getInteger("I_BK_TICKET"));
        setIExceed(json.getInteger("I_EXCEED"));
        setILhTicket(json.getInteger("I_LH_TICKET"));
        setIOrder(json.getInteger("I_ORDER"));
        setIPerson(json.getInteger("I_PERSON"));
        setISpTicket(json.getInteger("I_SP_TICKET"));
        setRHotelId(json.getLong("R_HOTEL_ID"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.math.BigDecimal for column D_PRICE!
        json.put("S_NAME",getSName());
        json.put("S_CODE",getSCode());
        json.put("S_HELP_CODE",getSHelpCode());
        json.put("J_CONFIG",getJConfig());
        json.put("I_BK_TICKET",getIBkTicket());
        json.put("I_EXCEED",getIExceed());
        json.put("I_LH_TICKET",getILhTicket());
        json.put("I_ORDER",getIOrder());
        json.put("I_PERSON",getIPerson());
        json.put("I_SP_TICKET",getISpTicket());
        json.put("R_HOTEL_ID",getRHotelId());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
