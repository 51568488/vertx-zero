/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface ISecUser extends Serializable {

    /**
     * Setter for <code>DB_HTL.SEC_USER.PK_ID</code>. uniqueId,PK_ID
     */
    public ISecUser setPkId(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.PK_ID</code>. uniqueId,PK_ID
     */
    public String getPkId();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_CODE</code>. code,S_CODE
     */
    public ISecUser setSCode(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_ALIPAY</code>. 支付宝,alipay,S_ALIPAY
     */
    public ISecUser setSAlipay(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_ALIPAY</code>. 支付宝,alipay,S_ALIPAY
     */
    public String getSAlipay();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_EMAIL</code>. 个人Email,email,S_EMAIL
     */
    public ISecUser setSEmail(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_EMAIL</code>. 个人Email,email,S_EMAIL
     */
    public String getSEmail();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_MOBILE</code>. 手机号,mobile,S_MOBILE
     */
    public ISecUser setSMobile(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_MOBILE</code>. 手机号,mobile,S_MOBILE
     */
    public String getSMobile();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_PASSWORD</code>. 登陆口令/密码,password,S_PASSWORD
     */
    public ISecUser setSPassword(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_PASSWORD</code>. 登陆口令/密码,password,S_PASSWORD
     */
    public String getSPassword();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_QQ</code>. 个人QQ号,qq,S_QQ
     */
    public ISecUser setSQq(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_QQ</code>. 个人QQ号,qq,S_QQ
     */
    public String getSQq();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_SECRET</code>. 专用私钥，OAuth中也可用,secret,S_SECRET
     */
    public ISecUser setSSecret(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_SECRET</code>. 专用私钥，OAuth中也可用,secret,S_SECRET
     */
    public String getSSecret();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_TAOBAO</code>. 淘宝,taobao,S_TAOBAO
     */
    public ISecUser setSTaobao(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_TAOBAO</code>. 淘宝,taobao,S_TAOBAO
     */
    public String getSTaobao();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_USERNAME</code>. 登陆账号,username,S_USERNAME
     */
    public ISecUser setSUsername(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_USERNAME</code>. 登陆账号,username,S_USERNAME
     */
    public String getSUsername();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_WECHAT</code>. 微信账号,wechat,S_WECHAT
     */
    public ISecUser setSWechat(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_WECHAT</code>. 微信账号,wechat,S_WECHAT
     */
    public String getSWechat();

    /**
     * Setter for <code>DB_HTL.SEC_USER.S_WEIBO</code>. 微博账号,weibo,S_WEIBO
     */
    public ISecUser setSWeibo(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.S_WEIBO</code>. 微博账号,weibo,S_WEIBO
     */
    public String getSWeibo();

    /**
     * Setter for <code>DB_HTL.SEC_USER.J_CONFIG</code>. config,J_CONFIG
     */
    public ISecUser setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.SEC_USER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public ISecUser setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.SEC_USER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public ISecUser setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.SEC_USER.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public ISecUser setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.SEC_USER.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public ISecUser setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.SEC_USER.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public ISecUser setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.SEC_USER.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public ISecUser setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.SEC_USER.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public ISecUser setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.SEC_USER.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface ISecUser
     */
    public void from(up.god.jooq.tables.interfaces.ISecUser from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface ISecUser
     */
    public <E extends up.god.jooq.tables.interfaces.ISecUser> E into(E into);

    default ISecUser fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getString("PK_ID"));
        setSCode(json.getString("S_CODE"));
        setSAlipay(json.getString("S_ALIPAY"));
        setSEmail(json.getString("S_EMAIL"));
        setSMobile(json.getString("S_MOBILE"));
        setSPassword(json.getString("S_PASSWORD"));
        setSQq(json.getString("S_QQ"));
        setSSecret(json.getString("S_SECRET"));
        setSTaobao(json.getString("S_TAOBAO"));
        setSUsername(json.getString("S_USERNAME"));
        setSWechat(json.getString("S_WECHAT"));
        setSWeibo(json.getString("S_WEIBO"));
        setJConfig(json.getString("J_CONFIG"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        json.put("S_CODE",getSCode());
        json.put("S_ALIPAY",getSAlipay());
        json.put("S_EMAIL",getSEmail());
        json.put("S_MOBILE",getSMobile());
        json.put("S_PASSWORD",getSPassword());
        json.put("S_QQ",getSQq());
        json.put("S_SECRET",getSSecret());
        json.put("S_TAOBAO",getSTaobao());
        json.put("S_USERNAME",getSUsername());
        json.put("S_WECHAT",getSWechat());
        json.put("S_WEIBO",getSWeibo());
        json.put("J_CONFIG",getJConfig());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
