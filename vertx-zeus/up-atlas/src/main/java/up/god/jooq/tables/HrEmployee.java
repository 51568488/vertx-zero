/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.HrEmployeeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HrEmployee extends TableImpl<HrEmployeeRecord> {

    private static final long serialVersionUID = -1852071217;

    /**
     * The reference instance of <code>DB_HTL.HR_EMPLOYEE</code>
     */
    public static final HrEmployee HR_EMPLOYEE = new HrEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HrEmployeeRecord> getRecordType() {
        return HrEmployeeRecord.class;
    }

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<HrEmployeeRecord, Long> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.D_BIRTHDAY</code>. birthday,D_BIRTHDAY
     */
    public final TableField<HrEmployeeRecord, LocalDateTime> D_BIRTHDAY = createField("D_BIRTHDAY", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "birthday,D_BIRTHDAY");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_CODE</code>. code,S_CODE
     */
    public final TableField<HrEmployeeRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_COMPANY</code>. company,S_COMPANY
     */
    public final TableField<HrEmployeeRecord, String> S_COMPANY = createField("S_COMPANY", org.jooq.impl.SQLDataType.VARCHAR(64), this, "company,S_COMPANY");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_COUNTRY</code>. country,S_COUNTRY
     */
    public final TableField<HrEmployeeRecord, String> S_COUNTRY = createField("S_COUNTRY", org.jooq.impl.SQLDataType.VARCHAR(32), this, "country,S_COUNTRY");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_DEPARTMENT</code>. department,S_DEPARTMENT
     */
    public final TableField<HrEmployeeRecord, String> S_DEPARTMENT = createField("S_DEPARTMENT", org.jooq.impl.SQLDataType.VARCHAR(64), this, "department,S_DEPARTMENT");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_EMPLOYEE_NUM</code>. employeeNumber,S_EMPLOYEE_NUM
     */
    public final TableField<HrEmployeeRecord, String> S_EMPLOYEE_NUM = createField("S_EMPLOYEE_NUM", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "employeeNumber,S_EMPLOYEE_NUM");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_GENDER</code>. gender,S_GENDER
     */
    public final TableField<HrEmployeeRecord, String> S_GENDER = createField("S_GENDER", org.jooq.impl.SQLDataType.VARCHAR(10), this, "gender,S_GENDER");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_JOB</code>. job,S_JOB
     */
    public final TableField<HrEmployeeRecord, String> S_JOB = createField("S_JOB", org.jooq.impl.SQLDataType.VARCHAR(64), this, "job,S_JOB");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_MARITAL</code>. marital,S_MARITAL
     */
    public final TableField<HrEmployeeRecord, String> S_MARITAL = createField("S_MARITAL", org.jooq.impl.SQLDataType.VARCHAR(20), this, "marital,S_MARITAL");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_NICKNAME</code>. nickname,S_NICKNAME
     */
    public final TableField<HrEmployeeRecord, String> S_NICKNAME = createField("S_NICKNAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "nickname,S_NICKNAME");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_REALNAME</code>. realname,S_REALNAME
     */
    public final TableField<HrEmployeeRecord, String> S_REALNAME = createField("S_REALNAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "realname,S_REALNAME");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_SINID</code>. Social Insurance Number:（加拿大专用）,sinid,S_SINID
     */
    public final TableField<HrEmployeeRecord, String> S_SINID = createField("S_SINID", org.jooq.impl.SQLDataType.VARCHAR(64), this, "Social Insurance Number:（加拿大专用）,sinid,S_SINID");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_SSNID</code>. Social Security Number：社会安全码（美国境内用）,ssnid,S_SSNID
     */
    public final TableField<HrEmployeeRecord, String> S_SSNID = createField("S_SSNID", org.jooq.impl.SQLDataType.VARCHAR(64), this, "Social Security Number：社会安全码（美国境内用）,ssnid,S_SSNID");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_WORK_EMAIL</code>. workEmail,S_WORK_EMAIL
     */
    public final TableField<HrEmployeeRecord, String> S_WORK_EMAIL = createField("S_WORK_EMAIL", org.jooq.impl.SQLDataType.VARCHAR(255), this, "workEmail,S_WORK_EMAIL");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_WORK_LOCATION</code>. workLocation,S_WORK_LOCATION
     */
    public final TableField<HrEmployeeRecord, String> S_WORK_LOCATION = createField("S_WORK_LOCATION", org.jooq.impl.SQLDataType.VARCHAR(2048), this, "workLocation,S_WORK_LOCATION");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.S_WORK_PHONE</code>. workPhone,S_WORK_PHONE
     */
    public final TableField<HrEmployeeRecord, String> S_WORK_PHONE = createField("S_WORK_PHONE", org.jooq.impl.SQLDataType.VARCHAR(20), this, "workPhone,S_WORK_PHONE");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<HrEmployeeRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.RLT_CAT_ID</code>. catId,RLT_CAT_ID
     */
    public final TableField<HrEmployeeRecord, Long> RLT_CAT_ID = createField("RLT_CAT_ID", org.jooq.impl.SQLDataType.BIGINT, this, "catId,RLT_CAT_ID");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.R_USER_ID</code>. userId,R_USER_ID
     */
    public final TableField<HrEmployeeRecord, String> R_USER_ID = createField("R_USER_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "userId,R_USER_ID");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.R_JOB_ID</code>. jobId,R_JOB_ID
     */
    public final TableField<HrEmployeeRecord, Long> R_JOB_ID = createField("R_JOB_ID", org.jooq.impl.SQLDataType.BIGINT, this, "jobId,R_JOB_ID");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<HrEmployeeRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<HrEmployeeRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<HrEmployeeRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<HrEmployeeRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<HrEmployeeRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<HrEmployeeRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.HR_EMPLOYEE.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<HrEmployeeRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.HR_EMPLOYEE</code> table reference
     */
    public HrEmployee() {
        this(DSL.name("HR_EMPLOYEE"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.HR_EMPLOYEE</code> table reference
     */
    public HrEmployee(String alias) {
        this(DSL.name(alias), HR_EMPLOYEE);
    }

    /**
     * Create an aliased <code>DB_HTL.HR_EMPLOYEE</code> table reference
     */
    public HrEmployee(Name alias) {
        this(alias, HR_EMPLOYEE);
    }

    private HrEmployee(Name alias, Table<HrEmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private HrEmployee(Name alias, Table<HrEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HR_EMPLOYEE_FK_HR_EMPLOYEE_R_JOB_ID, Indexes.HR_EMPLOYEE_PRIMARY, Indexes.HR_EMPLOYEE_UK_HR_EMPLOYEE_R_USER_ID_Z_SIGMA, Indexes.HR_EMPLOYEE_UK_HR_EMPLOYEE_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HrEmployeeRecord, Long> getIdentity() {
        return Keys.IDENTITY_HR_EMPLOYEE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HrEmployeeRecord> getPrimaryKey() {
        return Keys.KEY_HR_EMPLOYEE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HrEmployeeRecord>> getKeys() {
        return Arrays.<UniqueKey<HrEmployeeRecord>>asList(Keys.KEY_HR_EMPLOYEE_PRIMARY, Keys.KEY_HR_EMPLOYEE_UK_HR_EMPLOYEE_S_CODE_Z_SIGMA, Keys.KEY_HR_EMPLOYEE_UK_HR_EMPLOYEE_R_USER_ID_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HrEmployee as(String alias) {
        return new HrEmployee(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HrEmployee as(Name alias) {
        return new HrEmployee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HrEmployee rename(String name) {
        return new HrEmployee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HrEmployee rename(Name name) {
        return new HrEmployee(name, null);
    }
}
