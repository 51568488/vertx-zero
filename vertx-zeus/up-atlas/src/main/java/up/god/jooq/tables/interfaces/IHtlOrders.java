/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IHtlOrders extends Serializable {

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.PK_ID</code>. uniqueId,PK_ID
     */
    public IHtlOrders setPkId(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.PK_ID</code>. uniqueId,PK_ID
     */
    public String getPkId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.D_AMOUNT</code>. 【会员卡卡余额】（ReadOnly固定值）。,amount,D_AMOUNT
     */
    public IHtlOrders setDAmount(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.D_AMOUNT</code>. 【会员卡卡余额】（ReadOnly固定值）。,amount,D_AMOUNT
     */
    public BigDecimal getDAmount();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.D_AMOUNT_ACTUAL</code>. 【实际金额】该订单所有订单项减去折扣后的实际金额（amountActual x quantity）总和。,amountActual,D_AMOUNT_ACTUAL
     */
    public IHtlOrders setDAmountActual(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.D_AMOUNT_ACTUAL</code>. 【实际金额】该订单所有订单项减去折扣后的实际金额（amountActual x quantity）总和。,amountActual,D_AMOUNT_ACTUAL
     */
    public BigDecimal getDAmountActual();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.D_AMOUNT_TAXED</code>. 【税后金额】该订单税后的金额，amountTaxed = amountActual x ( 1 - taxRate )。,amountTaxed,D_AMOUNT_TAXED
     */
    public IHtlOrders setDAmountTaxed(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.D_AMOUNT_TAXED</code>. 【税后金额】该订单税后的金额，amountTaxed = amountActual x ( 1 - taxRate )。,amountTaxed,D_AMOUNT_TAXED
     */
    public BigDecimal getDAmountTaxed();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.D_AMOUNT_TOTAL</code>. 【总金额】该订单所有订单项中原始金额（amountPrice x quantity）总和。,amountTotal,D_AMOUNT_TOTAL
     */
    public IHtlOrders setDAmountTotal(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.D_AMOUNT_TOTAL</code>. 【总金额】该订单所有订单项中原始金额（amountPrice x quantity）总和。,amountTotal,D_AMOUNT_TOTAL
     */
    public BigDecimal getDAmountTotal();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.D_FINISHED_TIME</code>. 【完成时间】该订单关闭的时间，或者被取消的时间。,finishedTime,D_FINISHED_TIME
     */
    public IHtlOrders setDFinishedTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.D_FINISHED_TIME</code>. 【完成时间】该订单关闭的时间，或者被取消的时间。,finishedTime,D_FINISHED_TIME
     */
    public LocalDateTime getDFinishedTime();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.D_ORDER_TIME</code>. 【订单时间】下订/制单时间。,orderTime,D_ORDER_TIME
     */
    public IHtlOrders setDOrderTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.D_ORDER_TIME</code>. 【订单时间】下订/制单时间。,orderTime,D_ORDER_TIME
     */
    public LocalDateTime getDOrderTime();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.D_TAX</code>. 【订单税】该订单的税信息：tax = amountActual x taxRate,tax,D_TAX
     */
    public IHtlOrders setDTax(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.D_TAX</code>. 【订单税】该订单的税信息：tax = amountActual x taxRate,tax,D_TAX
     */
    public BigDecimal getDTax();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.D_TAX_RATE</code>. 【税率】该订单的税率信息。,taxRate,D_TAX_RATE
     */
    public IHtlOrders setDTaxRate(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.D_TAX_RATE</code>. 【税率】该订单的税率信息。,taxRate,D_TAX_RATE
     */
    public BigDecimal getDTaxRate();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.T_COMMENT</code>. 【备注信息】该订单备注信息,comment,T_COMMENT
     */
    public IHtlOrders setTComment(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.T_COMMENT</code>. 【备注信息】该订单备注信息,comment,T_COMMENT
     */
    public String getTComment();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.V_COMPANY_ID</code>. REF: RES_COMPANY【所属公司】当前订单所属公司ID。,companyId,V_COMPANY_ID
     */
    public IHtlOrders setVCompanyId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.V_COMPANY_ID</code>. REF: RES_COMPANY【所属公司】当前订单所属公司ID。,companyId,V_COMPANY_ID
     */
    public Long getVCompanyId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.V_CURRENCY_ID</code>. REF: RES_CURRENCY【关联货币】当前订单使用的货币信息。,currencyId,V_CURRENCY_ID
     */
    public IHtlOrders setVCurrencyId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.V_CURRENCY_ID</code>. REF: RES_CURRENCY【关联货币】当前订单使用的货币信息。,currencyId,V_CURRENCY_ID
     */
    public Long getVCurrencyId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_CODE</code>. code,S_CODE
     */
    public IHtlOrders setSCode(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_CREATOR</code>. creator,S_CREATOR
     */
    public IHtlOrders setSCreator(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_CREATOR</code>. creator,S_CREATOR
     */
    public String getSCreator();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_CREDENCE</code>. credence,S_CREDENCE
     */
    public IHtlOrders setSCredence(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_CREDENCE</code>. credence,S_CREDENCE
     */
    public String getSCredence();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_GROUP_LEADER</code>. groupLeader,S_GROUP_LEADER
     */
    public IHtlOrders setSGroupLeader(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_GROUP_LEADER</code>. groupLeader,S_GROUP_LEADER
     */
    public String getSGroupLeader();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_GROUP_NAME</code>. groupName,S_GROUP_NAME
     */
    public IHtlOrders setSGroupName(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_GROUP_NAME</code>. groupName,S_GROUP_NAME
     */
    public String getSGroupName();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_MEMBER</code>. member,S_MEMBER
     */
    public IHtlOrders setSMember(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_MEMBER</code>. member,S_MEMBER
     */
    public String getSMember();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_OPERATOR</code>. operator,S_OPERATOR
     */
    public IHtlOrders setSOperator(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_OPERATOR</code>. operator,S_OPERATOR
     */
    public String getSOperator();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_PARTNER</code>. partner,S_PARTNER
     */
    public IHtlOrders setSPartner(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_PARTNER</code>. partner,S_PARTNER
     */
    public String getSPartner();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_PHONE</code>. 【预定电话】该订单预定人联系电话,phone,S_PHONE
     */
    public IHtlOrders setSPhone(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_PHONE</code>. 【预定电话】该订单预定人联系电话,phone,S_PHONE
     */
    public String getSPhone();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_PRESERVOR</code>. preservor,S_PRESERVOR
     */
    public IHtlOrders setSPreservor(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_PRESERVOR</code>. preservor,S_PRESERVOR
     */
    public String getSPreservor();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_SERIAL</code>. serial,S_SERIAL
     */
    public IHtlOrders setSSerial(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_SERIAL</code>. serial,S_SERIAL
     */
    public String getSSerial();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_STATUS</code>. orderStatus,S_STATUS
     */
    public IHtlOrders setSStatus(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_STATUS</code>. orderStatus,S_STATUS
     */
    public String getSStatus();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.S_SURETY</code>. 担保人,surety,S_SURETY
     */
    public IHtlOrders setSSurety(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.S_SURETY</code>. 担保人,surety,S_SURETY
     */
    public String getSSurety();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.J_CONFIG</code>. config,J_CONFIG
     */
    public IHtlOrders setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.RLT_CODE_MARKET</code>. codeMarket,RLT_CODE_MARKET
     */
    public IHtlOrders setRltCodeMarket(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.RLT_CODE_MARKET</code>. codeMarket,RLT_CODE_MARKET
     */
    public Long getRltCodeMarket();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.RLT_CODE_SOURCE</code>. codeSource,RLT_CODE_SOURCE
     */
    public IHtlOrders setRltCodeSource(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.RLT_CODE_SOURCE</code>. codeSource,RLT_CODE_SOURCE
     */
    public Long getRltCodeSource();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.RLT_ORD_CATEGORY</code>. cat,RLT_ORD_CATEGORY
     */
    public IHtlOrders setRltOrdCategory(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.RLT_ORD_CATEGORY</code>. cat,RLT_ORD_CATEGORY
     */
    public Long getRltOrdCategory();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.RLT_ORD_METHOD</code>. method,RLT_ORD_METHOD
     */
    public IHtlOrders setRltOrdMethod(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.RLT_ORD_METHOD</code>. method,RLT_ORD_METHOD
     */
    public Long getRltOrdMethod();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.RLT_SURETY_TYPE</code>. suretyType,RLT_SURETY_TYPE
     */
    public IHtlOrders setRltSuretyType(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.RLT_SURETY_TYPE</code>. suretyType,RLT_SURETY_TYPE
     */
    public Long getRltSuretyType();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.R_HOTEL_ID</code>. hotelId,R_HOTEL_ID
     */
    public IHtlOrders setRHotelId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.R_HOTEL_ID</code>. hotelId,R_HOTEL_ID
     */
    public Long getRHotelId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public IHtlOrders setRMemberId(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public String getRMemberId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.R_OPERATOR_ID</code>. operatorId,R_OPERATOR_ID
     */
    public IHtlOrders setROperatorId(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.R_OPERATOR_ID</code>. operatorId,R_OPERATOR_ID
     */
    public String getROperatorId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.R_PARTNER_ID</code>. REF: RES_PARTNER【所属伙伴】当前订单对应的供应商、协议单位对应ID。,partnerId,R_PARTNER_ID
     */
    public IHtlOrders setRPartnerId(Long value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.R_PARTNER_ID</code>. REF: RES_PARTNER【所属伙伴】当前订单对应的供应商、协议单位对应ID。,partnerId,R_PARTNER_ID
     */
    public Long getRPartnerId();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.IS_APPROVAL</code>. 【是否审核】当前订单是否已经审核？,approval,IS_APPROVAL
     */
    public IHtlOrders setIsApproval(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.IS_APPROVAL</code>. 【是否审核】当前订单是否已经审核？,approval,IS_APPROVAL
     */
    public Boolean getIsApproval();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.IS_DIRECT</code>. direct,IS_DIRECT
     */
    public IHtlOrders setIsDirect(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.IS_DIRECT</code>. direct,IS_DIRECT
     */
    public Boolean getIsDirect();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.IS_GROUPED</code>. grouped,IS_GROUPED
     */
    public IHtlOrders setIsGrouped(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.IS_GROUPED</code>. grouped,IS_GROUPED
     */
    public Boolean getIsGrouped();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.IS_INVOICE</code>. 【是否开票】当前订单是否开了发票？,invoice,IS_INVOICE
     */
    public IHtlOrders setIsInvoice(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.IS_INVOICE</code>. 【是否开票】当前订单是否开了发票？,invoice,IS_INVOICE
     */
    public Boolean getIsInvoice();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IHtlOrders setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IHtlOrders setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IHtlOrders setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IHtlOrders setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IHtlOrders setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IHtlOrders setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.HTL_ORDERS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IHtlOrders setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.HTL_ORDERS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IHtlOrders
     */
    public void from(up.god.jooq.tables.interfaces.IHtlOrders from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IHtlOrders
     */
    public <E extends up.god.jooq.tables.interfaces.IHtlOrders> E into(E into);

    default IHtlOrders fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getString("PK_ID"));
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_ACTUAL!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_TAXED!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_TOTAL!
        // Omitting unrecognized type java.time.LocalDateTime for column D_FINISHED_TIME!
        // Omitting unrecognized type java.time.LocalDateTime for column D_ORDER_TIME!
        // Omitting unrecognized type java.math.BigDecimal for column D_TAX!
        // Omitting unrecognized type java.math.BigDecimal for column D_TAX_RATE!
        setTComment(json.getString("T_COMMENT"));
        setVCompanyId(json.getLong("V_COMPANY_ID"));
        setVCurrencyId(json.getLong("V_CURRENCY_ID"));
        setSCode(json.getString("S_CODE"));
        setSCreator(json.getString("S_CREATOR"));
        setSCredence(json.getString("S_CREDENCE"));
        setSGroupLeader(json.getString("S_GROUP_LEADER"));
        setSGroupName(json.getString("S_GROUP_NAME"));
        setSMember(json.getString("S_MEMBER"));
        setSOperator(json.getString("S_OPERATOR"));
        setSPartner(json.getString("S_PARTNER"));
        setSPhone(json.getString("S_PHONE"));
        setSPreservor(json.getString("S_PRESERVOR"));
        setSSerial(json.getString("S_SERIAL"));
        setSStatus(json.getString("S_STATUS"));
        setSSurety(json.getString("S_SURETY"));
        setJConfig(json.getString("J_CONFIG"));
        setRltCodeMarket(json.getLong("RLT_CODE_MARKET"));
        setRltCodeSource(json.getLong("RLT_CODE_SOURCE"));
        setRltOrdCategory(json.getLong("RLT_ORD_CATEGORY"));
        setRltOrdMethod(json.getLong("RLT_ORD_METHOD"));
        setRltSuretyType(json.getLong("RLT_SURETY_TYPE"));
        setRHotelId(json.getLong("R_HOTEL_ID"));
        setRMemberId(json.getString("R_MEMBER_ID"));
        setROperatorId(json.getString("R_OPERATOR_ID"));
        setRPartnerId(json.getLong("R_PARTNER_ID"));
        setIsApproval(json.getBoolean("IS_APPROVAL"));
        setIsDirect(json.getBoolean("IS_DIRECT"));
        setIsGrouped(json.getBoolean("IS_GROUPED"));
        setIsInvoice(json.getBoolean("IS_INVOICE"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_ACTUAL!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_TAXED!
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT_TOTAL!
        // Omitting unrecognized type java.time.LocalDateTime for column D_FINISHED_TIME!
        // Omitting unrecognized type java.time.LocalDateTime for column D_ORDER_TIME!
        // Omitting unrecognized type java.math.BigDecimal for column D_TAX!
        // Omitting unrecognized type java.math.BigDecimal for column D_TAX_RATE!
        json.put("T_COMMENT",getTComment());
        json.put("V_COMPANY_ID",getVCompanyId());
        json.put("V_CURRENCY_ID",getVCurrencyId());
        json.put("S_CODE",getSCode());
        json.put("S_CREATOR",getSCreator());
        json.put("S_CREDENCE",getSCredence());
        json.put("S_GROUP_LEADER",getSGroupLeader());
        json.put("S_GROUP_NAME",getSGroupName());
        json.put("S_MEMBER",getSMember());
        json.put("S_OPERATOR",getSOperator());
        json.put("S_PARTNER",getSPartner());
        json.put("S_PHONE",getSPhone());
        json.put("S_PRESERVOR",getSPreservor());
        json.put("S_SERIAL",getSSerial());
        json.put("S_STATUS",getSStatus());
        json.put("S_SURETY",getSSurety());
        json.put("J_CONFIG",getJConfig());
        json.put("RLT_CODE_MARKET",getRltCodeMarket());
        json.put("RLT_CODE_SOURCE",getRltCodeSource());
        json.put("RLT_ORD_CATEGORY",getRltOrdCategory());
        json.put("RLT_ORD_METHOD",getRltOrdMethod());
        json.put("RLT_SURETY_TYPE",getRltSuretyType());
        json.put("R_HOTEL_ID",getRHotelId());
        json.put("R_MEMBER_ID",getRMemberId());
        json.put("R_OPERATOR_ID",getROperatorId());
        json.put("R_PARTNER_ID",getRPartnerId());
        json.put("IS_APPROVAL",getIsApproval());
        json.put("IS_DIRECT",getIsDirect());
        json.put("IS_GROUPED",getIsGrouped());
        json.put("IS_INVOICE",getIsInvoice());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
