/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.records;


import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import up.god.jooq.tables.PsiRepository;
import up.god.jooq.tables.interfaces.IPsiRepository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PsiRepositoryRecord extends UpdatableRecordImpl<PsiRepositoryRecord> implements IPsiRepository {

    private static final long serialVersionUID = -467082429;

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.PK_ID</code>. uniqueId,PK_ID
     */
    @Override
    public PsiRepositoryRecord setPkId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.PK_ID</code>. uniqueId,PK_ID
     */
    @Override
    public Long getPkId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.D_EXPIRED_TIME</code>. expiredTime,D_EXPIRED_TIME
     */
    @Override
    public PsiRepositoryRecord setDExpiredTime(LocalDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.D_EXPIRED_TIME</code>. expiredTime,D_EXPIRED_TIME
     */
    @Override
    public LocalDateTime getDExpiredTime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.D_PRODUCE_TIME</code>. produceTime,D_PRODUCE_TIME
     */
    @Override
    public PsiRepositoryRecord setDProduceTime(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.D_PRODUCE_TIME</code>. produceTime,D_PRODUCE_TIME
     */
    @Override
    public LocalDateTime getDProduceTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.T_COMMENT</code>. comment,T_COMMENT
     */
    @Override
    public PsiRepositoryRecord setTComment(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.T_COMMENT</code>. comment,T_COMMENT
     */
    @Override
    public String getTComment() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.V_MERCHANDISE_ID</code>. merchandiseId,V_MERCHANDISE_ID
     */
    @Override
    public PsiRepositoryRecord setVMerchandiseId(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.V_MERCHANDISE_ID</code>. merchandiseId,V_MERCHANDISE_ID
     */
    @Override
    public Long getVMerchandiseId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.S_NAME</code>. name,S_NAME
     */
    @Override
    public PsiRepositoryRecord setSName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.S_NAME</code>. name,S_NAME
     */
    @Override
    public String getSName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.S_CODE</code>. code,S_CODE
     */
    @Override
    public PsiRepositoryRecord setSCode(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.S_CODE</code>. code,S_CODE
     */
    @Override
    public String getSCode() {
        return (String) get(6);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.S_WAREHOUSE</code>. warehouse,S_WAREHOUSE
     */
    @Override
    public PsiRepositoryRecord setSWarehouse(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.S_WAREHOUSE</code>. warehouse,S_WAREHOUSE
     */
    @Override
    public String getSWarehouse() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.J_CONFIG</code>. config,J_CONFIG
     */
    @Override
    public PsiRepositoryRecord setJConfig(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.J_CONFIG</code>. config,J_CONFIG
     */
    @Override
    public String getJConfig() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_BROKEN</code>. 损坏数量,qtyBroken,I_QTY_BROKEN
     */
    @Override
    public PsiRepositoryRecord setIQtyBroken(Integer value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_BROKEN</code>. 损坏数量,qtyBroken,I_QTY_BROKEN
     */
    @Override
    public Integer getIQtyBroken() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_LEFT</code>. 剩余数量,qtyLeft,I_QTY_LEFT
     */
    @Override
    public PsiRepositoryRecord setIQtyLeft(Integer value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_LEFT</code>. 剩余数量,qtyLeft,I_QTY_LEFT
     */
    @Override
    public Integer getIQtyLeft() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_LIMIT</code>. 容量上限,qtyLimit,I_QTY_LIMIT
     */
    @Override
    public PsiRepositoryRecord setIQtyLimit(Integer value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_LIMIT</code>. 容量上限,qtyLimit,I_QTY_LIMIT
     */
    @Override
    public Integer getIQtyLimit() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_TAKEN</code>. 占用数量,qtyTaken,I_QTY_TAKEN
     */
    @Override
    public PsiRepositoryRecord setIQtyTaken(Integer value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.I_QTY_TAKEN</code>. 占用数量,qtyTaken,I_QTY_TAKEN
     */
    @Override
    public Integer getIQtyTaken() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.R_UBICATION_ID</code>. ubicationId,R_UBICATION_ID
     */
    @Override
    public PsiRepositoryRecord setRUbicationId(Long value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.R_UBICATION_ID</code>. ubicationId,R_UBICATION_ID
     */
    @Override
    public Long getRUbicationId() {
        return (Long) get(13);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.IS_REJECT</code>. reject,IS_REJECT
     */
    @Override
    public PsiRepositoryRecord setIsReject(Boolean value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.IS_REJECT</code>. reject,IS_REJECT
     */
    @Override
    public Boolean getIsReject() {
        return (Boolean) get(14);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.IS_SCRAP</code>. scrap,IS_SCRAP
     */
    @Override
    public PsiRepositoryRecord setIsScrap(Boolean value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.IS_SCRAP</code>. scrap,IS_SCRAP
     */
    @Override
    public Boolean getIsScrap() {
        return (Boolean) get(15);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    @Override
    public PsiRepositoryRecord setIsActive(Boolean value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    @Override
    public Boolean getIsActive() {
        return (Boolean) get(16);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    @Override
    public PsiRepositoryRecord setZSigma(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    @Override
    public String getZSigma() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    @Override
    public PsiRepositoryRecord setZLanguage(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    @Override
    public String getZLanguage() {
        return (String) get(18);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    @Override
    public PsiRepositoryRecord setZCreateBy(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    @Override
    public String getZCreateBy() {
        return (String) get(19);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    @Override
    public PsiRepositoryRecord setZCreateTime(LocalDateTime value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    @Override
    public LocalDateTime getZCreateTime() {
        return (LocalDateTime) get(20);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    @Override
    public PsiRepositoryRecord setZUpdateBy(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    @Override
    public String getZUpdateBy() {
        return (String) get(21);
    }

    /**
     * Setter for <code>DB_HTL.PSI_REPOSITORY.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    @Override
    public PsiRepositoryRecord setZUpdateTime(LocalDateTime value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.PSI_REPOSITORY.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    @Override
    public LocalDateTime getZUpdateTime() {
        return (LocalDateTime) get(22);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IPsiRepository from) {
        setPkId(from.getPkId());
        setDExpiredTime(from.getDExpiredTime());
        setDProduceTime(from.getDProduceTime());
        setTComment(from.getTComment());
        setVMerchandiseId(from.getVMerchandiseId());
        setSName(from.getSName());
        setSCode(from.getSCode());
        setSWarehouse(from.getSWarehouse());
        setJConfig(from.getJConfig());
        setIQtyBroken(from.getIQtyBroken());
        setIQtyLeft(from.getIQtyLeft());
        setIQtyLimit(from.getIQtyLimit());
        setIQtyTaken(from.getIQtyTaken());
        setRUbicationId(from.getRUbicationId());
        setIsReject(from.getIsReject());
        setIsScrap(from.getIsScrap());
        setIsActive(from.getIsActive());
        setZSigma(from.getZSigma());
        setZLanguage(from.getZLanguage());
        setZCreateBy(from.getZCreateBy());
        setZCreateTime(from.getZCreateTime());
        setZUpdateBy(from.getZUpdateBy());
        setZUpdateTime(from.getZUpdateTime());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IPsiRepository> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PsiRepositoryRecord
     */
    public PsiRepositoryRecord() {
        super(PsiRepository.PSI_REPOSITORY);
    }

    /**
     * Create a detached, initialised PsiRepositoryRecord
     */
    public PsiRepositoryRecord(Long pkId, LocalDateTime dExpiredTime, LocalDateTime dProduceTime, String tComment, Long vMerchandiseId, String sName, String sCode, String sWarehouse, String jConfig, Integer iQtyBroken, Integer iQtyLeft, Integer iQtyLimit, Integer iQtyTaken, Long rUbicationId, Boolean isReject, Boolean isScrap, Boolean isActive, String zSigma, String zLanguage, String zCreateBy, LocalDateTime zCreateTime, String zUpdateBy, LocalDateTime zUpdateTime) {
        super(PsiRepository.PSI_REPOSITORY);

        set(0, pkId);
        set(1, dExpiredTime);
        set(2, dProduceTime);
        set(3, tComment);
        set(4, vMerchandiseId);
        set(5, sName);
        set(6, sCode);
        set(7, sWarehouse);
        set(8, jConfig);
        set(9, iQtyBroken);
        set(10, iQtyLeft);
        set(11, iQtyLimit);
        set(12, iQtyTaken);
        set(13, rUbicationId);
        set(14, isReject);
        set(15, isScrap);
        set(16, isActive);
        set(17, zSigma);
        set(18, zLanguage);
        set(19, zCreateBy);
        set(20, zCreateTime);
        set(21, zUpdateBy);
        set(22, zUpdateTime);
    }
}
