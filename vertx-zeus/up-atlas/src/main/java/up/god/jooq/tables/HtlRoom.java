/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.HtlRoomRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HtlRoom extends TableImpl<HtlRoomRecord> {

    private static final long serialVersionUID = -576856397;

    /**
     * The reference instance of <code>DB_HTL.HTL_ROOM</code>
     */
    public static final HtlRoom HTL_ROOM = new HtlRoom();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HtlRoomRecord> getRecordType() {
        return HtlRoomRecord.class;
    }

    /**
     * The column <code>DB_HTL.HTL_ROOM.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<HtlRoomRecord, Long> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.HTL_ROOM.T_ROOMATTRS</code>. attrs,T_ROOMATTRS
     */
    public final TableField<HtlRoomRecord, String> T_ROOMATTRS = createField("T_ROOMATTRS", org.jooq.impl.SQLDataType.CLOB, this, "attrs,T_ROOMATTRS");

    /**
     * The column <code>DB_HTL.HTL_ROOM.S_CODE</code>. code,S_CODE
     */
    public final TableField<HtlRoomRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.HTL_ROOM.S_ROOM_NUM</code>. number,S_ROOM_NUM
     */
    public final TableField<HtlRoomRecord, String> S_ROOM_NUM = createField("S_ROOM_NUM", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "number,S_ROOM_NUM");

    /**
     * The column <code>DB_HTL.HTL_ROOM.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<HtlRoomRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.HTL_ROOM.J_FEATURES</code>. features,J_FEATURES
     */
    public final TableField<HtlRoomRecord, String> J_FEATURES = createField("J_FEATURES", org.jooq.impl.SQLDataType.CLOB, this, "features,J_FEATURES");

    /**
     * The column <code>DB_HTL.HTL_ROOM.R_FLOOR_ID</code>. floor,R_FLOOR_ID
     */
    public final TableField<HtlRoomRecord, Long> R_FLOOR_ID = createField("R_FLOOR_ID", org.jooq.impl.SQLDataType.BIGINT, this, "floor,R_FLOOR_ID");

    /**
     * The column <code>DB_HTL.HTL_ROOM.R_HOTEL_ID</code>. hotelId,R_HOTEL_ID
     */
    public final TableField<HtlRoomRecord, Long> R_HOTEL_ID = createField("R_HOTEL_ID", org.jooq.impl.SQLDataType.BIGINT, this, "hotelId,R_HOTEL_ID");

    /**
     * The column <code>DB_HTL.HTL_ROOM.R_ROOM_TYPE_ID</code>. roomTypeId,R_ROOM_TYPE_ID
     */
    public final TableField<HtlRoomRecord, Long> R_ROOM_TYPE_ID = createField("R_ROOM_TYPE_ID", org.jooq.impl.SQLDataType.BIGINT, this, "roomTypeId,R_ROOM_TYPE_ID");

    /**
     * The column <code>DB_HTL.HTL_ROOM.R_TENT_ID</code>. tent,R_TENT_ID
     */
    public final TableField<HtlRoomRecord, Long> R_TENT_ID = createField("R_TENT_ID", org.jooq.impl.SQLDataType.BIGINT, this, "tent,R_TENT_ID");

    /**
     * The column <code>DB_HTL.HTL_ROOM.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<HtlRoomRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.HTL_ROOM.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<HtlRoomRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.HTL_ROOM.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<HtlRoomRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.HTL_ROOM.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<HtlRoomRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.HTL_ROOM.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<HtlRoomRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.HTL_ROOM.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<HtlRoomRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.HTL_ROOM.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<HtlRoomRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.HTL_ROOM</code> table reference
     */
    public HtlRoom() {
        this(DSL.name("HTL_ROOM"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.HTL_ROOM</code> table reference
     */
    public HtlRoom(String alias) {
        this(DSL.name(alias), HTL_ROOM);
    }

    /**
     * Create an aliased <code>DB_HTL.HTL_ROOM</code> table reference
     */
    public HtlRoom(Name alias) {
        this(alias, HTL_ROOM);
    }

    private HtlRoom(Name alias, Table<HtlRoomRecord> aliased) {
        this(alias, aliased, null);
    }

    private HtlRoom(Name alias, Table<HtlRoomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HTL_ROOM_FK_HTL_ROOM_R_FLOOR_ID, Indexes.HTL_ROOM_FK_HTL_ROOM_R_HOTEL_ID, Indexes.HTL_ROOM_FK_HTL_ROOM_R_ROOM_TYPE_ID, Indexes.HTL_ROOM_FK_HTL_ROOM_R_TENT_ID, Indexes.HTL_ROOM_PRIMARY, Indexes.HTL_ROOM_UK_HTL_ROOM_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HtlRoomRecord, Long> getIdentity() {
        return Keys.IDENTITY_HTL_ROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HtlRoomRecord> getPrimaryKey() {
        return Keys.KEY_HTL_ROOM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HtlRoomRecord>> getKeys() {
        return Arrays.<UniqueKey<HtlRoomRecord>>asList(Keys.KEY_HTL_ROOM_PRIMARY, Keys.KEY_HTL_ROOM_UK_HTL_ROOM_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtlRoom as(String alias) {
        return new HtlRoom(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtlRoom as(Name alias) {
        return new HtlRoom(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HtlRoom rename(String name) {
        return new HtlRoom(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HtlRoom rename(Name name) {
        return new HtlRoom(name, null);
    }
}
