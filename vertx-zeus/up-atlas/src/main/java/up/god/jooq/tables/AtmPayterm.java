/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.AtmPaytermRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AtmPayterm extends TableImpl<AtmPaytermRecord> {

    private static final long serialVersionUID = 129599565;

    /**
     * The reference instance of <code>DB_HTL.ATM_PAYTERM</code>
     */
    public static final AtmPayterm ATM_PAYTERM = new AtmPayterm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AtmPaytermRecord> getRecordType() {
        return AtmPaytermRecord.class;
    }

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<AtmPaytermRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.D_PRICE</code>. 【标准价】该消费项的基础单价，该单价用于简单产品直接消费场景（充当了产品单价作用）,price,D_PRICE
     */
    public final TableField<AtmPaytermRecord, BigDecimal> D_PRICE = createField("D_PRICE", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "【标准价】该消费项的基础单价，该单价用于简单产品直接消费场景（充当了产品单价作用）,price,D_PRICE");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.T_COMMENT</code>. 【备注】消费项备注信息,comment,T_COMMENT
     */
    public final TableField<AtmPaytermRecord, String> T_COMMENT = createField("T_COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "【备注】消费项备注信息,comment,T_COMMENT");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.V_ACCOUNT_ID</code>. accountId,V_ACCOUNT_ID
     */
    public final TableField<AtmPaytermRecord, String> V_ACCOUNT_ID = createField("V_ACCOUNT_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "accountId,V_ACCOUNT_ID");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.S_NAME</code>. 【名称】消费项名称,name,S_NAME
     */
    public final TableField<AtmPaytermRecord, String> S_NAME = createField("S_NAME", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "【名称】消费项名称,name,S_NAME");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.S_CODE</code>. code,S_CODE
     */
    public final TableField<AtmPaytermRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.S_HELP_CODE</code>. 【助记码】消费项助记码,helpCode,S_HELP_CODE
     */
    public final TableField<AtmPaytermRecord, String> S_HELP_CODE = createField("S_HELP_CODE", org.jooq.impl.SQLDataType.VARCHAR(16), this, "【助记码】消费项助记码,helpCode,S_HELP_CODE");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.S_TYPE</code>. 【名称】消费项类别,type,S_TYPE
     */
    public final TableField<AtmPaytermRecord, String> S_TYPE = createField("S_TYPE", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "【名称】消费项类别,type,S_TYPE");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.S_UNIT</code>. 【计量单位】该消费项的计量单位,unit,S_UNIT
     */
    public final TableField<AtmPaytermRecord, String> S_UNIT = createField("S_UNIT", org.jooq.impl.SQLDataType.VARCHAR(10), this, "【计量单位】该消费项的计量单位,unit,S_UNIT");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<AtmPaytermRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.R_CATEGORY_ID</code>. 【关联类别】该消费项关联的类别ID,categoryId,R_CATEGORY_ID
     */
    public final TableField<AtmPaytermRecord, String> R_CATEGORY_ID = createField("R_CATEGORY_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "【关联类别】该消费项关联的类别ID,categoryId,R_CATEGORY_ID");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.R_COMPANY_ID</code>. 【所属公司】该消费项所属公司ID,companyId,R_COMPANY_ID
     */
    public final TableField<AtmPaytermRecord, Long> R_COMPANY_ID = createField("R_COMPANY_ID", org.jooq.impl.SQLDataType.BIGINT, this, "【所属公司】该消费项所属公司ID,companyId,R_COMPANY_ID");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.IS_DETAIL</code>. detail,IS_DETAIL
     */
    public final TableField<AtmPaytermRecord, Boolean> IS_DETAIL = createField("IS_DETAIL", org.jooq.impl.SQLDataType.BOOLEAN, this, "detail,IS_DETAIL");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<AtmPaytermRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<AtmPaytermRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<AtmPaytermRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<AtmPaytermRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<AtmPaytermRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<AtmPaytermRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.ATM_PAYTERM.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<AtmPaytermRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.ATM_PAYTERM</code> table reference
     */
    public AtmPayterm() {
        this(DSL.name("ATM_PAYTERM"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.ATM_PAYTERM</code> table reference
     */
    public AtmPayterm(String alias) {
        this(DSL.name(alias), ATM_PAYTERM);
    }

    /**
     * Create an aliased <code>DB_HTL.ATM_PAYTERM</code> table reference
     */
    public AtmPayterm(Name alias) {
        this(alias, ATM_PAYTERM);
    }

    private AtmPayterm(Name alias, Table<AtmPaytermRecord> aliased) {
        this(alias, aliased, null);
    }

    private AtmPayterm(Name alias, Table<AtmPaytermRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ATM_PAYTERM_FK_ATM_PAYTERM_R_CATEGORY_ID, Indexes.ATM_PAYTERM_FK_ATM_PAYTERM_R_COMPANY_ID, Indexes.ATM_PAYTERM_PRIMARY, Indexes.ATM_PAYTERM_UK_ATM_PAYTERM_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AtmPaytermRecord> getPrimaryKey() {
        return Keys.KEY_ATM_PAYTERM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AtmPaytermRecord>> getKeys() {
        return Arrays.<UniqueKey<AtmPaytermRecord>>asList(Keys.KEY_ATM_PAYTERM_PRIMARY, Keys.KEY_ATM_PAYTERM_UK_ATM_PAYTERM_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AtmPayterm as(String alias) {
        return new AtmPayterm(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AtmPayterm as(Name alias) {
        return new AtmPayterm(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AtmPayterm rename(String name) {
        return new AtmPayterm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AtmPayterm rename(Name name) {
        return new AtmPayterm(name, null);
    }
}
