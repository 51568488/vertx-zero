/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.AbsOrderItemsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AbsOrderItems extends TableImpl<AbsOrderItemsRecord> {

    private static final long serialVersionUID = 1104909798;

    /**
     * The reference instance of <code>DB_HTL.ABS_ORDER_ITEMS</code>
     */
    public static final AbsOrderItems ABS_ORDER_ITEMS = new AbsOrderItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbsOrderItemsRecord> getRecordType() {
        return AbsOrderItemsRecord.class;
    }

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<AbsOrderItemsRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.D_AMOUNT_ACTUAL</code>. 【实际单价】该明细的实际单价：amountActual = amountPrice x ( 1 - discount ),amountActual,D_AMOUNT_ACTUAL
     */
    public final TableField<AbsOrderItemsRecord, BigDecimal> D_AMOUNT_ACTUAL = createField("D_AMOUNT_ACTUAL", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "【实际单价】该明细的实际单价：amountActual = amountPrice x ( 1 - discount ),amountActual,D_AMOUNT_ACTUAL");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.D_AMOUNT_PRICE</code>. 【单价】该订单明细对应商品的单价。,amountPrice,D_AMOUNT_PRICE
     */
    public final TableField<AbsOrderItemsRecord, BigDecimal> D_AMOUNT_PRICE = createField("D_AMOUNT_PRICE", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "【单价】该订单明细对应商品的单价。,amountPrice,D_AMOUNT_PRICE");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.D_AMOUNT_TOTAL</code>. 【总价】该明细的总价格：amountTotal = amountActual x quantity,amountTotal,D_AMOUNT_TOTAL
     */
    public final TableField<AbsOrderItemsRecord, BigDecimal> D_AMOUNT_TOTAL = createField("D_AMOUNT_TOTAL", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "【总价】该明细的总价格：amountTotal = amountActual x quantity,amountTotal,D_AMOUNT_TOTAL");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.D_DISCOUNT</code>. 【折扣率】格式为小数，单位%，用于记录当前明细的折扣率,discount,D_DISCOUNT
     */
    public final TableField<AbsOrderItemsRecord, BigDecimal> D_DISCOUNT = createField("D_DISCOUNT", org.jooq.impl.SQLDataType.DECIMAL(3, 2), this, "【折扣率】格式为小数，单位%，用于记录当前明细的折扣率,discount,D_DISCOUNT");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.S_CODE</code>. code,S_CODE
     */
    public final TableField<AbsOrderItemsRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.S_SERIAL</code>. REF:SYS_NUMBER【订单明细编号】系统自动生成。,serial,S_SERIAL
     */
    public final TableField<AbsOrderItemsRecord, String> S_SERIAL = createField("S_SERIAL", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "REF:SYS_NUMBER【订单明细编号】系统自动生成。,serial,S_SERIAL");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<AbsOrderItemsRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.I_QUANTITY</code>. 【数量】该订单明细对应的商品数量，一条明细记录中仅允许一种商品。,quantity,I_QUANTITY
     */
    public final TableField<AbsOrderItemsRecord, Integer> I_QUANTITY = createField("I_QUANTITY", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "【数量】该订单明细对应的商品数量，一条明细记录中仅允许一种商品。,quantity,I_QUANTITY");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.R_ORDER_ID</code>. REF：ABS_ORDERS【订单ID】该明细关联的订单ID值,orderId,R_ORDER_ID
     */
    public final TableField<AbsOrderItemsRecord, Long> R_ORDER_ID = createField("R_ORDER_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "REF：ABS_ORDERS【订单ID】该明细关联的订单ID值,orderId,R_ORDER_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.R_PRODUCT_ID</code>. REF：ABS_PRODUCT【商品ID】该明细对应的商品ID值,productId,R_PRODUCT_ID
     */
    public final TableField<AbsOrderItemsRecord, Long> R_PRODUCT_ID = createField("R_PRODUCT_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF：ABS_PRODUCT【商品ID】该明细对应的商品ID值,productId,R_PRODUCT_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<AbsOrderItemsRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<AbsOrderItemsRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<AbsOrderItemsRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<AbsOrderItemsRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<AbsOrderItemsRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<AbsOrderItemsRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.ABS_ORDER_ITEMS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<AbsOrderItemsRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.ABS_ORDER_ITEMS</code> table reference
     */
    public AbsOrderItems() {
        this(DSL.name("ABS_ORDER_ITEMS"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.ABS_ORDER_ITEMS</code> table reference
     */
    public AbsOrderItems(String alias) {
        this(DSL.name(alias), ABS_ORDER_ITEMS);
    }

    /**
     * Create an aliased <code>DB_HTL.ABS_ORDER_ITEMS</code> table reference
     */
    public AbsOrderItems(Name alias) {
        this(alias, ABS_ORDER_ITEMS);
    }

    private AbsOrderItems(Name alias, Table<AbsOrderItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AbsOrderItems(Name alias, Table<AbsOrderItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ABS_ORDER_ITEMS_FK_ABS_ORDER_ITEMS_R_ORDER_ID, Indexes.ABS_ORDER_ITEMS_FK_ABS_ORDER_ITEMS_R_PRODUCT_ID, Indexes.ABS_ORDER_ITEMS_PRIMARY, Indexes.ABS_ORDER_ITEMS_UK_ABS_ORDER_ITEMS_S_CODE_Z_SIGMA, Indexes.ABS_ORDER_ITEMS_UK_ABS_ORDER_ITEMS_S_SERIAL_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AbsOrderItemsRecord> getPrimaryKey() {
        return Keys.KEY_ABS_ORDER_ITEMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AbsOrderItemsRecord>> getKeys() {
        return Arrays.<UniqueKey<AbsOrderItemsRecord>>asList(Keys.KEY_ABS_ORDER_ITEMS_PRIMARY, Keys.KEY_ABS_ORDER_ITEMS_UK_ABS_ORDER_ITEMS_S_CODE_Z_SIGMA, Keys.KEY_ABS_ORDER_ITEMS_UK_ABS_ORDER_ITEMS_S_SERIAL_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AbsOrderItems as(String alias) {
        return new AbsOrderItems(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AbsOrderItems as(Name alias) {
        return new AbsOrderItems(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AbsOrderItems rename(String name) {
        return new AbsOrderItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AbsOrderItems rename(Name name) {
        return new AbsOrderItems(name, null);
    }
}
