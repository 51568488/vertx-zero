/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IResContract extends Serializable {

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.PK_ID</code>. uniqueId,PK_ID
     */
    public IResContract setPkId(Long value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.PK_ID</code>. uniqueId,PK_ID
     */
    public Long getPkId();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.D_RUNUP_LIMIT</code>. 挂账限制,runupLimit,D_RUNUP_LIMIT
     */
    public IResContract setDRunupLimit(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.D_RUNUP_LIMIT</code>. 挂账限制,runupLimit,D_RUNUP_LIMIT
     */
    public BigDecimal getDRunupLimit();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.S_NAME</code>. name,S_NAME
     */
    public IResContract setSName(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.S_NAME</code>. name,S_NAME
     */
    public String getSName();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.S_CODE</code>. code,S_CODE
     */
    public IResContract setSCode(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.S_OPTOR_MOBILE</code>. operatorMobile,S_OPTOR_MOBILE
     */
    public IResContract setSOptorMobile(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.S_OPTOR_MOBILE</code>. operatorMobile,S_OPTOR_MOBILE
     */
    public String getSOptorMobile();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.S_OPTOR_NAME</code>. operatorName,S_OPTOR_NAME
     */
    public IResContract setSOptorName(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.S_OPTOR_NAME</code>. operatorName,S_OPTOR_NAME
     */
    public String getSOptorName();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.S_PHONE</code>. phone,S_PHONE
     */
    public IResContract setSPhone(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.S_PHONE</code>. phone,S_PHONE
     */
    public String getSPhone();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.J_CONFIG</code>. config,J_CONFIG
     */
    public IResContract setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.RLT_CONTRACT_ITEM</code>. contractItem,RLT_CONTRACT_ITEM
     */
    public IResContract setRltContractItem(Long value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.RLT_CONTRACT_ITEM</code>. contractItem,RLT_CONTRACT_ITEM
     */
    public Long getRltContractItem();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.RLT_CONTRACT_TYPE</code>. type,RLT_CONTRACT_TYPE
     */
    public IResContract setRltContractType(Long value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.RLT_CONTRACT_TYPE</code>. type,RLT_CONTRACT_TYPE
     */
    public Long getRltContractType();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.R_COMPANY_ID</code>. companyId,R_COMPANY_ID
     */
    public IResContract setRCompanyId(Long value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.R_COMPANY_ID</code>. companyId,R_COMPANY_ID
     */
    public Long getRCompanyId();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.R_OPERATOR_ID</code>. operatorId,R_OPERATOR_ID
     */
    public IResContract setROperatorId(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.R_OPERATOR_ID</code>. operatorId,R_OPERATOR_ID
     */
    public String getROperatorId();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.IS_RUNUP</code>. runup,IS_RUNUP
     */
    public IResContract setIsRunup(Boolean value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.IS_RUNUP</code>. runup,IS_RUNUP
     */
    public Boolean getIsRunup();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IResContract setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IResContract setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IResContract setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IResContract setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IResContract setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IResContract setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.RES_CONTRACT.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IResContract setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_CONTRACT.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IResContract
     */
    public void from(up.god.jooq.tables.interfaces.IResContract from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IResContract
     */
    public <E extends up.god.jooq.tables.interfaces.IResContract> E into(E into);

    default IResContract fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getLong("PK_ID"));
        // Omitting unrecognized type java.math.BigDecimal for column D_RUNUP_LIMIT!
        setSName(json.getString("S_NAME"));
        setSCode(json.getString("S_CODE"));
        setSOptorMobile(json.getString("S_OPTOR_MOBILE"));
        setSOptorName(json.getString("S_OPTOR_NAME"));
        setSPhone(json.getString("S_PHONE"));
        setJConfig(json.getString("J_CONFIG"));
        setRltContractItem(json.getLong("RLT_CONTRACT_ITEM"));
        setRltContractType(json.getLong("RLT_CONTRACT_TYPE"));
        setRCompanyId(json.getLong("R_COMPANY_ID"));
        setROperatorId(json.getString("R_OPERATOR_ID"));
        setIsRunup(json.getBoolean("IS_RUNUP"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.math.BigDecimal for column D_RUNUP_LIMIT!
        json.put("S_NAME",getSName());
        json.put("S_CODE",getSCode());
        json.put("S_OPTOR_MOBILE",getSOptorMobile());
        json.put("S_OPTOR_NAME",getSOptorName());
        json.put("S_PHONE",getSPhone());
        json.put("J_CONFIG",getJConfig());
        json.put("RLT_CONTRACT_ITEM",getRltContractItem());
        json.put("RLT_CONTRACT_TYPE",getRltContractType());
        json.put("R_COMPANY_ID",getRCompanyId());
        json.put("R_OPERATOR_ID",getROperatorId());
        json.put("IS_RUNUP",getIsRunup());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
