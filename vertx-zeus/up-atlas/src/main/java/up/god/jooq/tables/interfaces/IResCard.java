/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IResCard extends Serializable {

    /**
     * Setter for <code>DB_HTL.RES_CARD.PK_ID</code>. uniqueId,PK_ID
     */
    public IResCard setPkId(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.PK_ID</code>. uniqueId,PK_ID
     */
    public String getPkId();

    /**
     * Setter for <code>DB_HTL.RES_CARD.D_AMOUNT</code>. 卡余额,amount,D_AMOUNT
     */
    public IResCard setDAmount(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.D_AMOUNT</code>. 卡余额,amount,D_AMOUNT
     */
    public BigDecimal getDAmount();

    /**
     * Setter for <code>DB_HTL.RES_CARD.D_EXPIRED_TIME</code>. 过期时间,expiredTime,D_EXPIRED_TIME
     */
    public IResCard setDExpiredTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.D_EXPIRED_TIME</code>. 过期时间,expiredTime,D_EXPIRED_TIME
     */
    public LocalDateTime getDExpiredTime();

    /**
     * Setter for <code>DB_HTL.RES_CARD.L_POINT</code>. 积分,point,L_POINT
     */
    public IResCard setLPoint(Long value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.L_POINT</code>. 积分,point,L_POINT
     */
    public Long getLPoint();

    /**
     * Setter for <code>DB_HTL.RES_CARD.S_CODE</code>. code,S_CODE
     */
    public IResCard setSCode(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.RES_CARD.S_BATCH</code>. 批次,batch,S_BATCH
     */
    public IResCard setSBatch(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.S_BATCH</code>. 批次,batch,S_BATCH
     */
    public String getSBatch();

    /**
     * Setter for <code>DB_HTL.RES_CARD.S_NUMBER</code>. 卡号,number,S_NUMBER
     */
    public IResCard setSNumber(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.S_NUMBER</code>. 卡号,number,S_NUMBER
     */
    public String getSNumber();

    /**
     * Setter for <code>DB_HTL.RES_CARD.J_CONFIG</code>. config,J_CONFIG
     */
    public IResCard setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.RES_CARD.RLT_CARD_TYPE</code>. 类型,cardType,RLT_CARD_TYPE
     */
    public IResCard setRltCardType(Long value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.RLT_CARD_TYPE</code>. 类型,cardType,RLT_CARD_TYPE
     */
    public Long getRltCardType();

    /**
     * Setter for <code>DB_HTL.RES_CARD.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public IResCard setRMemberId(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public String getRMemberId();

    /**
     * Setter for <code>DB_HTL.RES_CARD.IS_MAJOR</code>. 主卡,major,IS_MAJOR
     */
    public IResCard setIsMajor(Boolean value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.IS_MAJOR</code>. 主卡,major,IS_MAJOR
     */
    public Boolean getIsMajor();

    /**
     * Setter for <code>DB_HTL.RES_CARD.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IResCard setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.RES_CARD.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IResCard setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.RES_CARD.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IResCard setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.RES_CARD.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IResCard setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.RES_CARD.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IResCard setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.RES_CARD.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IResCard setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.RES_CARD.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IResCard setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.RES_CARD.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IResCard
     */
    public void from(up.god.jooq.tables.interfaces.IResCard from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IResCard
     */
    public <E extends up.god.jooq.tables.interfaces.IResCard> E into(E into);

    default IResCard fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getString("PK_ID"));
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT!
        // Omitting unrecognized type java.time.LocalDateTime for column D_EXPIRED_TIME!
        setLPoint(json.getLong("L_POINT"));
        setSCode(json.getString("S_CODE"));
        setSBatch(json.getString("S_BATCH"));
        setSNumber(json.getString("S_NUMBER"));
        setJConfig(json.getString("J_CONFIG"));
        setRltCardType(json.getLong("RLT_CARD_TYPE"));
        setRMemberId(json.getString("R_MEMBER_ID"));
        setIsMajor(json.getBoolean("IS_MAJOR"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        // Omitting unrecognized type java.math.BigDecimal for column D_AMOUNT!
        // Omitting unrecognized type java.time.LocalDateTime for column D_EXPIRED_TIME!
        json.put("L_POINT",getLPoint());
        json.put("S_CODE",getSCode());
        json.put("S_BATCH",getSBatch());
        json.put("S_NUMBER",getSNumber());
        json.put("J_CONFIG",getJConfig());
        json.put("RLT_CARD_TYPE",getRltCardType());
        json.put("R_MEMBER_ID",getRMemberId());
        json.put("IS_MAJOR",getIsMajor());
        json.put("IS_ACTIVE",getIsActive());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
