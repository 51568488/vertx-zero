/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.AbsOrdersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AbsOrders extends TableImpl<AbsOrdersRecord> {

    private static final long serialVersionUID = -1993738085;

    /**
     * The reference instance of <code>DB_HTL.ABS_ORDERS</code>
     */
    public static final AbsOrders ABS_ORDERS = new AbsOrders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbsOrdersRecord> getRecordType() {
        return AbsOrdersRecord.class;
    }

    /**
     * The column <code>DB_HTL.ABS_ORDERS.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<AbsOrdersRecord, Long> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.D_AMOUNT_ACTUAL</code>. 【实际金额】该订单所有订单项减去折扣后的实际金额（amountActual x quantity）总和。,amountActual,D_AMOUNT_ACTUAL
     */
    public final TableField<AbsOrdersRecord, BigDecimal> D_AMOUNT_ACTUAL = createField("D_AMOUNT_ACTUAL", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "【实际金额】该订单所有订单项减去折扣后的实际金额（amountActual x quantity）总和。,amountActual,D_AMOUNT_ACTUAL");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.D_AMOUNT_TAXED</code>. 【税后金额】该订单税后的金额，amountTaxed = amountActual x ( 1 - taxRate )。,amountTaxed,D_AMOUNT_TAXED
     */
    public final TableField<AbsOrdersRecord, BigDecimal> D_AMOUNT_TAXED = createField("D_AMOUNT_TAXED", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "【税后金额】该订单税后的金额，amountTaxed = amountActual x ( 1 - taxRate )。,amountTaxed,D_AMOUNT_TAXED");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.D_AMOUNT_TOTAL</code>. 【总金额】该订单所有订单项中原始金额（amountPrice x quantity）总和。,amountTotal,D_AMOUNT_TOTAL
     */
    public final TableField<AbsOrdersRecord, BigDecimal> D_AMOUNT_TOTAL = createField("D_AMOUNT_TOTAL", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "【总金额】该订单所有订单项中原始金额（amountPrice x quantity）总和。,amountTotal,D_AMOUNT_TOTAL");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.D_FINISHED_TIME</code>. 【完成时间】该订单关闭的时间，或者被取消的时间。,finishedTime,D_FINISHED_TIME
     */
    public final TableField<AbsOrdersRecord, LocalDateTime> D_FINISHED_TIME = createField("D_FINISHED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "【完成时间】该订单关闭的时间，或者被取消的时间。,finishedTime,D_FINISHED_TIME");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.D_ORDER_TIME</code>. 【订单时间】下订/制单时间。,orderTime,D_ORDER_TIME
     */
    public final TableField<AbsOrdersRecord, LocalDateTime> D_ORDER_TIME = createField("D_ORDER_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "【订单时间】下订/制单时间。,orderTime,D_ORDER_TIME");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.D_TAX</code>. 【订单税】该订单的税信息：tax = amountActual x taxRate,tax,D_TAX
     */
    public final TableField<AbsOrdersRecord, BigDecimal> D_TAX = createField("D_TAX", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "【订单税】该订单的税信息：tax = amountActual x taxRate,tax,D_TAX");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.D_TAX_RATE</code>. 【税率】该订单的税率信息。,taxRate,D_TAX_RATE
     */
    public final TableField<AbsOrdersRecord, BigDecimal> D_TAX_RATE = createField("D_TAX_RATE", org.jooq.impl.SQLDataType.DECIMAL(3, 2), this, "【税率】该订单的税率信息。,taxRate,D_TAX_RATE");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.S_CODE</code>. code,S_CODE
     */
    public final TableField<AbsOrdersRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.S_CREDENCE</code>. credence,S_CREDENCE
     */
    public final TableField<AbsOrdersRecord, String> S_CREDENCE = createField("S_CREDENCE", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "credence,S_CREDENCE");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.S_SERIAL</code>. serial,S_SERIAL
     */
    public final TableField<AbsOrdersRecord, String> S_SERIAL = createField("S_SERIAL", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "serial,S_SERIAL");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.S_STATUS</code>. orderStatus,S_STATUS
     */
    public final TableField<AbsOrdersRecord, String> S_STATUS = createField("S_STATUS", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "orderStatus,S_STATUS");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<AbsOrdersRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.H_CAT_ID</code>. REF: SYS_CATEGORY【订单类型】当前订单对应的订单类型ID。,category,H_CAT_ID
     */
    public final TableField<AbsOrdersRecord, String> H_CAT_ID = createField("H_CAT_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "REF: SYS_CATEGORY【订单类型】当前订单对应的订单类型ID。,category,H_CAT_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.R_COMPANY_ID</code>. REF: RES_COMPANY【所属公司】当前订单所属公司ID。,companyId,R_COMPANY_ID
     */
    public final TableField<AbsOrdersRecord, Long> R_COMPANY_ID = createField("R_COMPANY_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF: RES_COMPANY【所属公司】当前订单所属公司ID。,companyId,R_COMPANY_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.R_CURRENCY_ID</code>. REF: RES_CURRENCY【关联货币】当前订单使用的货币信息。,currencyId,R_CURRENCY_ID
     */
    public final TableField<AbsOrdersRecord, Long> R_CURRENCY_ID = createField("R_CURRENCY_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF: RES_CURRENCY【关联货币】当前订单使用的货币信息。,currencyId,R_CURRENCY_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.R_INCOTERM_ID</code>. REF: ATM_INCOTERM【贸易术语】当前订单使用的贸易术语。,incotermId,R_INCOTERM_ID
     */
    public final TableField<AbsOrdersRecord, Long> R_INCOTERM_ID = createField("R_INCOTERM_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF: ATM_INCOTERM【贸易术语】当前订单使用的贸易术语。,incotermId,R_INCOTERM_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.R_PARTNER_ID</code>. REF: RES_PARTNER【所属伙伴】当前订单对应的供应商、协议单位对应ID。,partnerId,R_PARTNER_ID
     */
    public final TableField<AbsOrdersRecord, Long> R_PARTNER_ID = createField("R_PARTNER_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF: RES_PARTNER【所属伙伴】当前订单对应的供应商、协议单位对应ID。,partnerId,R_PARTNER_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.R_WH_ID</code>. REF: PSI_WAREHOUSE【所属仓库】当前订单所属仓库信息（记录位置，进销存专用）。,warehouseId,R_WH_ID
     */
    public final TableField<AbsOrdersRecord, Long> R_WH_ID = createField("R_WH_ID", org.jooq.impl.SQLDataType.BIGINT, this, "REF: PSI_WAREHOUSE【所属仓库】当前订单所属仓库信息（记录位置，进销存专用）。,warehouseId,R_WH_ID");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.IS_APPROVAL</code>. 【是否审核】当前订单是否已经审核？,approval,IS_APPROVAL
     */
    public final TableField<AbsOrdersRecord, Boolean> IS_APPROVAL = createField("IS_APPROVAL", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "【是否审核】当前订单是否已经审核？,approval,IS_APPROVAL");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.IS_INVOICE</code>. 【是否开票】当前订单是否开了发票？,invoice,IS_INVOICE
     */
    public final TableField<AbsOrdersRecord, Boolean> IS_INVOICE = createField("IS_INVOICE", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "【是否开票】当前订单是否开了发票？,invoice,IS_INVOICE");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<AbsOrdersRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<AbsOrdersRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<AbsOrdersRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<AbsOrdersRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<AbsOrdersRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<AbsOrdersRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.ABS_ORDERS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<AbsOrdersRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.ABS_ORDERS</code> table reference
     */
    public AbsOrders() {
        this(DSL.name("ABS_ORDERS"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.ABS_ORDERS</code> table reference
     */
    public AbsOrders(String alias) {
        this(DSL.name(alias), ABS_ORDERS);
    }

    /**
     * Create an aliased <code>DB_HTL.ABS_ORDERS</code> table reference
     */
    public AbsOrders(Name alias) {
        this(alias, ABS_ORDERS);
    }

    private AbsOrders(Name alias, Table<AbsOrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AbsOrders(Name alias, Table<AbsOrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ABS_ORDERS_FK_ABS_ORDERS_H_CAT_ID, Indexes.ABS_ORDERS_FK_ABS_ORDERS_R_COMPANY_ID, Indexes.ABS_ORDERS_FK_ABS_ORDERS_R_CURRENCY_ID, Indexes.ABS_ORDERS_FK_ABS_ORDERS_R_INCOTERM_ID, Indexes.ABS_ORDERS_FK_ABS_ORDERS_R_PARTNER_ID, Indexes.ABS_ORDERS_FK_ABS_ORDERS_R_WH_ID, Indexes.ABS_ORDERS_PRIMARY, Indexes.ABS_ORDERS_UK_ABS_ORDERS_S_CODE_Z_SIGMA, Indexes.ABS_ORDERS_UK_ABS_ORDERS_S_SERIAL_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AbsOrdersRecord, Long> getIdentity() {
        return Keys.IDENTITY_ABS_ORDERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AbsOrdersRecord> getPrimaryKey() {
        return Keys.KEY_ABS_ORDERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AbsOrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<AbsOrdersRecord>>asList(Keys.KEY_ABS_ORDERS_PRIMARY, Keys.KEY_ABS_ORDERS_UK_ABS_ORDERS_S_CODE_Z_SIGMA, Keys.KEY_ABS_ORDERS_UK_ABS_ORDERS_S_SERIAL_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AbsOrders as(String alias) {
        return new AbsOrders(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AbsOrders as(Name alias) {
        return new AbsOrders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AbsOrders rename(String name) {
        return new AbsOrders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AbsOrders rename(Name name) {
        return new AbsOrders(name, null);
    }
}
