/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.HtlMemberRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HtlMember extends TableImpl<HtlMemberRecord> {

    private static final long serialVersionUID = -1689995625;

    /**
     * The reference instance of <code>DB_HTL.HTL_MEMBER</code>
     */
    public static final HtlMember HTL_MEMBER = new HtlMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HtlMemberRecord> getRecordType() {
        return HtlMemberRecord.class;
    }

    /**
     * The column <code>DB_HTL.HTL_MEMBER.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<HtlMemberRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.T_PREF_INTEREST</code>. prefInterest,T_PREF_INTEREST
     */
    public final TableField<HtlMemberRecord, String> T_PREF_INTEREST = createField("T_PREF_INTEREST", org.jooq.impl.SQLDataType.CLOB, this, "prefInterest,T_PREF_INTEREST");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.T_PREF_REPAST</code>. prefRepast,T_PREF_REPAST
     */
    public final TableField<HtlMemberRecord, String> T_PREF_REPAST = createField("T_PREF_REPAST", org.jooq.impl.SQLDataType.CLOB, this, "prefRepast,T_PREF_REPAST");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.T_PREF_ROOM</code>. prefRoom,T_PREF_ROOM
     */
    public final TableField<HtlMemberRecord, String> T_PREF_ROOM = createField("T_PREF_ROOM", org.jooq.impl.SQLDataType.CLOB, this, "prefRoom,T_PREF_ROOM");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.T_SPEC_REQUEST</code>. specRequest,T_SPEC_REQUEST
     */
    public final TableField<HtlMemberRecord, String> T_SPEC_REQUEST = createField("T_SPEC_REQUEST", org.jooq.impl.SQLDataType.CLOB, this, "specRequest,T_SPEC_REQUEST");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.S_CODE</code>. code,S_CODE
     */
    public final TableField<HtlMemberRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.S_LICENSE_NUM</code>. licenseNumber,S_LICENSE_NUM
     */
    public final TableField<HtlMemberRecord, String> S_LICENSE_NUM = createField("S_LICENSE_NUM", org.jooq.impl.SQLDataType.VARCHAR(16), this, "licenseNumber,S_LICENSE_NUM");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.S_PROPOSER</code>. 推荐人,proposer,S_PROPOSER
     */
    public final TableField<HtlMemberRecord, String> S_PROPOSER = createField("S_PROPOSER", org.jooq.impl.SQLDataType.VARCHAR(32), this, "推荐人,proposer,S_PROPOSER");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<HtlMemberRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.R_HOTEL_ID</code>. hotelId,R_HOTEL_ID
     */
    public final TableField<HtlMemberRecord, Long> R_HOTEL_ID = createField("R_HOTEL_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "hotelId,R_HOTEL_ID");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public final TableField<HtlMemberRecord, String> R_MEMBER_ID = createField("R_MEMBER_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "memberId,R_MEMBER_ID");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<HtlMemberRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<HtlMemberRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<HtlMemberRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<HtlMemberRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<HtlMemberRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<HtlMemberRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.HTL_MEMBER.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<HtlMemberRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.HTL_MEMBER</code> table reference
     */
    public HtlMember() {
        this(DSL.name("HTL_MEMBER"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.HTL_MEMBER</code> table reference
     */
    public HtlMember(String alias) {
        this(DSL.name(alias), HTL_MEMBER);
    }

    /**
     * Create an aliased <code>DB_HTL.HTL_MEMBER</code> table reference
     */
    public HtlMember(Name alias) {
        this(alias, HTL_MEMBER);
    }

    private HtlMember(Name alias, Table<HtlMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private HtlMember(Name alias, Table<HtlMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HTL_MEMBER_FK_HTL_MEMBER_R_HOTEL_ID, Indexes.HTL_MEMBER_FK_HTL_MEMBER_R_MEMBER_ID, Indexes.HTL_MEMBER_PRIMARY, Indexes.HTL_MEMBER_UK_HTL_MEMBER_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HtlMemberRecord> getPrimaryKey() {
        return Keys.KEY_HTL_MEMBER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HtlMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<HtlMemberRecord>>asList(Keys.KEY_HTL_MEMBER_PRIMARY, Keys.KEY_HTL_MEMBER_UK_HTL_MEMBER_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtlMember as(String alias) {
        return new HtlMember(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtlMember as(Name alias) {
        return new HtlMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HtlMember rename(String name) {
        return new HtlMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HtlMember rename(Name name) {
        return new HtlMember(name, null);
    }
}
