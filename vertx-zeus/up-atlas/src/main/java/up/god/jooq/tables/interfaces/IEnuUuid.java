/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.interfaces;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IEnuUuid extends Serializable {

    /**
     * Setter for <code>DB_HTL.ENU_UUID.PK_ID</code>. uniqueId,PK_ID
     */
    public IEnuUuid setPkId(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.PK_ID</code>. uniqueId,PK_ID
     */
    public String getPkId();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.B_BINARY</code>. binary,B_BINARY
     */
    public IEnuUuid setBBinary(byte... value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.B_BINARY</code>. binary,B_BINARY
     */
    public byte[] getBBinary();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.D_DATE1</code>. date,D_DATE1
     */
    public IEnuUuid setDDate1(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.D_DATE1</code>. date,D_DATE1
     */
    public LocalDateTime getDDate1();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.D_DECIMAL</code>. decimal,D_DECIMAL
     */
    public IEnuUuid setDDecimal(BigDecimal value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.D_DECIMAL</code>. decimal,D_DECIMAL
     */
    public BigDecimal getDDecimal();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.L_LONG</code>. long,L_LONG
     */
    public IEnuUuid setLLong(Long value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.L_LONG</code>. long,L_LONG
     */
    public Long getLLong();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.T_STRING</code>. text,T_STRING
     */
    public IEnuUuid setTString(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.T_STRING</code>. text,T_STRING
     */
    public String getTString();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.X_XML</code>. xml,X_XML
     */
    public IEnuUuid setXXml(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.X_XML</code>. xml,X_XML
     */
    public String getXXml();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.S_CODE</code>. code,S_CODE
     */
    public IEnuUuid setSCode(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.S_CODE</code>. code,S_CODE
     */
    public String getSCode();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.S_STRING</code>. string,S_STRING
     */
    public IEnuUuid setSString(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.S_STRING</code>. string,S_STRING
     */
    public String getSString();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.J_CONFIG</code>. config,J_CONFIG
     */
    public IEnuUuid setJConfig(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.J_CONFIG</code>. config,J_CONFIG
     */
    public String getJConfig();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.J_JSON</code>. json,J_JSON
     */
    public IEnuUuid setJJson(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.J_JSON</code>. json,J_JSON
     */
    public String getJJson();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.I_INT</code>. int,I_INT
     */
    public IEnuUuid setIInt(Integer value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.I_INT</code>. int,I_INT
     */
    public Integer getIInt();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.IS_BOOL</code>. boolean,IS_BOOL
     */
    public IEnuUuid setIsBool(Boolean value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.IS_BOOL</code>. boolean,IS_BOOL
     */
    public Boolean getIsBool();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public IEnuUuid setIsActive(Boolean value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public Boolean getIsActive();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.E_SCRIPT</code>. script,E_SCRIPT
     */
    public IEnuUuid setEScript(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.E_SCRIPT</code>. script,E_SCRIPT
     */
    public String getEScript();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public IEnuUuid setZSigma(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public String getZSigma();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public IEnuUuid setZLanguage(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public String getZLanguage();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public IEnuUuid setZCreateBy(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public String getZCreateBy();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public IEnuUuid setZCreateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public LocalDateTime getZCreateTime();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public IEnuUuid setZUpdateBy(String value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public String getZUpdateBy();

    /**
     * Setter for <code>DB_HTL.ENU_UUID.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public IEnuUuid setZUpdateTime(LocalDateTime value);

    /**
     * Getter for <code>DB_HTL.ENU_UUID.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public LocalDateTime getZUpdateTime();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IEnuUuid
     */
    public void from(up.god.jooq.tables.interfaces.IEnuUuid from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IEnuUuid
     */
    public <E extends up.god.jooq.tables.interfaces.IEnuUuid> E into(E into);

    default IEnuUuid fromJson(io.vertx.core.json.JsonObject json) {
        setPkId(json.getString("PK_ID"));
        setBBinary(json.getBinary("B_BINARY"));
        // Omitting unrecognized type java.time.LocalDateTime for column D_DATE1!
        // Omitting unrecognized type java.math.BigDecimal for column D_DECIMAL!
        setLLong(json.getLong("L_LONG"));
        setTString(json.getString("T_STRING"));
        setXXml(json.getString("X_XML"));
        setSCode(json.getString("S_CODE"));
        setSString(json.getString("S_STRING"));
        setJConfig(json.getString("J_CONFIG"));
        setJJson(json.getString("J_JSON"));
        setIInt(json.getInteger("I_INT"));
        setIsBool(json.getBoolean("IS_BOOL"));
        setIsActive(json.getBoolean("IS_ACTIVE"));
        setEScript(json.getString("E_SCRIPT"));
        setZSigma(json.getString("Z_SIGMA"));
        setZLanguage(json.getString("Z_LANGUAGE"));
        setZCreateBy(json.getString("Z_CREATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        setZUpdateBy(json.getString("Z_UPDATE_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("PK_ID",getPkId());
        json.put("B_BINARY",getBBinary());
        // Omitting unrecognized type java.time.LocalDateTime for column D_DATE1!
        // Omitting unrecognized type java.math.BigDecimal for column D_DECIMAL!
        json.put("L_LONG",getLLong());
        json.put("T_STRING",getTString());
        json.put("X_XML",getXXml());
        json.put("S_CODE",getSCode());
        json.put("S_STRING",getSString());
        json.put("J_CONFIG",getJConfig());
        json.put("J_JSON",getJJson());
        json.put("I_INT",getIInt());
        json.put("IS_BOOL",getIsBool());
        json.put("IS_ACTIVE",getIsActive());
        json.put("E_SCRIPT",getEScript());
        json.put("Z_SIGMA",getZSigma());
        json.put("Z_LANGUAGE",getZLanguage());
        json.put("Z_CREATE_BY",getZCreateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_CREATE_TIME!
        json.put("Z_UPDATE_BY",getZUpdateBy());
        // Omitting unrecognized type java.time.LocalDateTime for column Z_UPDATE_TIME!
        return json;
    }

}
