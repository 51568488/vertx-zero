/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import up.god.jooq.tables.AbsOrders;
import up.god.jooq.tables.interfaces.IAbsOrders;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AbsOrdersRecord extends UpdatableRecordImpl<AbsOrdersRecord> implements IAbsOrders {

    private static final long serialVersionUID = -999804266;

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.PK_ID</code>. uniqueId,PK_ID
     */
    @Override
    public AbsOrdersRecord setPkId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.PK_ID</code>. uniqueId,PK_ID
     */
    @Override
    public Long getPkId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.D_AMOUNT_ACTUAL</code>. 【实际金额】该订单所有订单项减去折扣后的实际金额（amountActual x quantity）总和。,amountActual,D_AMOUNT_ACTUAL
     */
    @Override
    public AbsOrdersRecord setDAmountActual(BigDecimal value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.D_AMOUNT_ACTUAL</code>. 【实际金额】该订单所有订单项减去折扣后的实际金额（amountActual x quantity）总和。,amountActual,D_AMOUNT_ACTUAL
     */
    @Override
    public BigDecimal getDAmountActual() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.D_AMOUNT_TAXED</code>. 【税后金额】该订单税后的金额，amountTaxed = amountActual x ( 1 - taxRate )。,amountTaxed,D_AMOUNT_TAXED
     */
    @Override
    public AbsOrdersRecord setDAmountTaxed(BigDecimal value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.D_AMOUNT_TAXED</code>. 【税后金额】该订单税后的金额，amountTaxed = amountActual x ( 1 - taxRate )。,amountTaxed,D_AMOUNT_TAXED
     */
    @Override
    public BigDecimal getDAmountTaxed() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.D_AMOUNT_TOTAL</code>. 【总金额】该订单所有订单项中原始金额（amountPrice x quantity）总和。,amountTotal,D_AMOUNT_TOTAL
     */
    @Override
    public AbsOrdersRecord setDAmountTotal(BigDecimal value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.D_AMOUNT_TOTAL</code>. 【总金额】该订单所有订单项中原始金额（amountPrice x quantity）总和。,amountTotal,D_AMOUNT_TOTAL
     */
    @Override
    public BigDecimal getDAmountTotal() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.D_FINISHED_TIME</code>. 【完成时间】该订单关闭的时间，或者被取消的时间。,finishedTime,D_FINISHED_TIME
     */
    @Override
    public AbsOrdersRecord setDFinishedTime(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.D_FINISHED_TIME</code>. 【完成时间】该订单关闭的时间，或者被取消的时间。,finishedTime,D_FINISHED_TIME
     */
    @Override
    public LocalDateTime getDFinishedTime() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.D_ORDER_TIME</code>. 【订单时间】下订/制单时间。,orderTime,D_ORDER_TIME
     */
    @Override
    public AbsOrdersRecord setDOrderTime(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.D_ORDER_TIME</code>. 【订单时间】下订/制单时间。,orderTime,D_ORDER_TIME
     */
    @Override
    public LocalDateTime getDOrderTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.D_TAX</code>. 【订单税】该订单的税信息：tax = amountActual x taxRate,tax,D_TAX
     */
    @Override
    public AbsOrdersRecord setDTax(BigDecimal value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.D_TAX</code>. 【订单税】该订单的税信息：tax = amountActual x taxRate,tax,D_TAX
     */
    @Override
    public BigDecimal getDTax() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.D_TAX_RATE</code>. 【税率】该订单的税率信息。,taxRate,D_TAX_RATE
     */
    @Override
    public AbsOrdersRecord setDTaxRate(BigDecimal value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.D_TAX_RATE</code>. 【税率】该订单的税率信息。,taxRate,D_TAX_RATE
     */
    @Override
    public BigDecimal getDTaxRate() {
        return (BigDecimal) get(7);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.S_CODE</code>. code,S_CODE
     */
    @Override
    public AbsOrdersRecord setSCode(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.S_CODE</code>. code,S_CODE
     */
    @Override
    public String getSCode() {
        return (String) get(8);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.S_CREDENCE</code>. credence,S_CREDENCE
     */
    @Override
    public AbsOrdersRecord setSCredence(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.S_CREDENCE</code>. credence,S_CREDENCE
     */
    @Override
    public String getSCredence() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.S_SERIAL</code>. serial,S_SERIAL
     */
    @Override
    public AbsOrdersRecord setSSerial(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.S_SERIAL</code>. serial,S_SERIAL
     */
    @Override
    public String getSSerial() {
        return (String) get(10);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.S_STATUS</code>. orderStatus,S_STATUS
     */
    @Override
    public AbsOrdersRecord setSStatus(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.S_STATUS</code>. orderStatus,S_STATUS
     */
    @Override
    public String getSStatus() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.J_CONFIG</code>. config,J_CONFIG
     */
    @Override
    public AbsOrdersRecord setJConfig(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.J_CONFIG</code>. config,J_CONFIG
     */
    @Override
    public String getJConfig() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.H_CAT_ID</code>. REF: SYS_CATEGORY【订单类型】当前订单对应的订单类型ID。,category,H_CAT_ID
     */
    @Override
    public AbsOrdersRecord setHCatId(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.H_CAT_ID</code>. REF: SYS_CATEGORY【订单类型】当前订单对应的订单类型ID。,category,H_CAT_ID
     */
    @Override
    public String getHCatId() {
        return (String) get(13);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.R_COMPANY_ID</code>. REF: RES_COMPANY【所属公司】当前订单所属公司ID。,companyId,R_COMPANY_ID
     */
    @Override
    public AbsOrdersRecord setRCompanyId(Long value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.R_COMPANY_ID</code>. REF: RES_COMPANY【所属公司】当前订单所属公司ID。,companyId,R_COMPANY_ID
     */
    @Override
    public Long getRCompanyId() {
        return (Long) get(14);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.R_CURRENCY_ID</code>. REF: RES_CURRENCY【关联货币】当前订单使用的货币信息。,currencyId,R_CURRENCY_ID
     */
    @Override
    public AbsOrdersRecord setRCurrencyId(Long value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.R_CURRENCY_ID</code>. REF: RES_CURRENCY【关联货币】当前订单使用的货币信息。,currencyId,R_CURRENCY_ID
     */
    @Override
    public Long getRCurrencyId() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.R_INCOTERM_ID</code>. REF: ATM_INCOTERM【贸易术语】当前订单使用的贸易术语。,incotermId,R_INCOTERM_ID
     */
    @Override
    public AbsOrdersRecord setRIncotermId(Long value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.R_INCOTERM_ID</code>. REF: ATM_INCOTERM【贸易术语】当前订单使用的贸易术语。,incotermId,R_INCOTERM_ID
     */
    @Override
    public Long getRIncotermId() {
        return (Long) get(16);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.R_PARTNER_ID</code>. REF: RES_PARTNER【所属伙伴】当前订单对应的供应商、协议单位对应ID。,partnerId,R_PARTNER_ID
     */
    @Override
    public AbsOrdersRecord setRPartnerId(Long value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.R_PARTNER_ID</code>. REF: RES_PARTNER【所属伙伴】当前订单对应的供应商、协议单位对应ID。,partnerId,R_PARTNER_ID
     */
    @Override
    public Long getRPartnerId() {
        return (Long) get(17);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.R_WH_ID</code>. REF: PSI_WAREHOUSE【所属仓库】当前订单所属仓库信息（记录位置，进销存专用）。,warehouseId,R_WH_ID
     */
    @Override
    public AbsOrdersRecord setRWhId(Long value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.R_WH_ID</code>. REF: PSI_WAREHOUSE【所属仓库】当前订单所属仓库信息（记录位置，进销存专用）。,warehouseId,R_WH_ID
     */
    @Override
    public Long getRWhId() {
        return (Long) get(18);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.IS_APPROVAL</code>. 【是否审核】当前订单是否已经审核？,approval,IS_APPROVAL
     */
    @Override
    public AbsOrdersRecord setIsApproval(Boolean value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.IS_APPROVAL</code>. 【是否审核】当前订单是否已经审核？,approval,IS_APPROVAL
     */
    @Override
    public Boolean getIsApproval() {
        return (Boolean) get(19);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.IS_INVOICE</code>. 【是否开票】当前订单是否开了发票？,invoice,IS_INVOICE
     */
    @Override
    public AbsOrdersRecord setIsInvoice(Boolean value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.IS_INVOICE</code>. 【是否开票】当前订单是否开了发票？,invoice,IS_INVOICE
     */
    @Override
    public Boolean getIsInvoice() {
        return (Boolean) get(20);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    @Override
    public AbsOrdersRecord setIsActive(Boolean value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    @Override
    public Boolean getIsActive() {
        return (Boolean) get(21);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    @Override
    public AbsOrdersRecord setZSigma(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    @Override
    public String getZSigma() {
        return (String) get(22);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    @Override
    public AbsOrdersRecord setZLanguage(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    @Override
    public String getZLanguage() {
        return (String) get(23);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    @Override
    public AbsOrdersRecord setZCreateBy(String value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    @Override
    public String getZCreateBy() {
        return (String) get(24);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    @Override
    public AbsOrdersRecord setZCreateTime(LocalDateTime value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    @Override
    public LocalDateTime getZCreateTime() {
        return (LocalDateTime) get(25);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    @Override
    public AbsOrdersRecord setZUpdateBy(String value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    @Override
    public String getZUpdateBy() {
        return (String) get(26);
    }

    /**
     * Setter for <code>DB_HTL.ABS_ORDERS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    @Override
    public AbsOrdersRecord setZUpdateTime(LocalDateTime value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>DB_HTL.ABS_ORDERS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    @Override
    public LocalDateTime getZUpdateTime() {
        return (LocalDateTime) get(27);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IAbsOrders from) {
        setPkId(from.getPkId());
        setDAmountActual(from.getDAmountActual());
        setDAmountTaxed(from.getDAmountTaxed());
        setDAmountTotal(from.getDAmountTotal());
        setDFinishedTime(from.getDFinishedTime());
        setDOrderTime(from.getDOrderTime());
        setDTax(from.getDTax());
        setDTaxRate(from.getDTaxRate());
        setSCode(from.getSCode());
        setSCredence(from.getSCredence());
        setSSerial(from.getSSerial());
        setSStatus(from.getSStatus());
        setJConfig(from.getJConfig());
        setHCatId(from.getHCatId());
        setRCompanyId(from.getRCompanyId());
        setRCurrencyId(from.getRCurrencyId());
        setRIncotermId(from.getRIncotermId());
        setRPartnerId(from.getRPartnerId());
        setRWhId(from.getRWhId());
        setIsApproval(from.getIsApproval());
        setIsInvoice(from.getIsInvoice());
        setIsActive(from.getIsActive());
        setZSigma(from.getZSigma());
        setZLanguage(from.getZLanguage());
        setZCreateBy(from.getZCreateBy());
        setZCreateTime(from.getZCreateTime());
        setZUpdateBy(from.getZUpdateBy());
        setZUpdateTime(from.getZUpdateTime());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IAbsOrders> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AbsOrdersRecord
     */
    public AbsOrdersRecord() {
        super(AbsOrders.ABS_ORDERS);
    }

    /**
     * Create a detached, initialised AbsOrdersRecord
     */
    public AbsOrdersRecord(Long pkId, BigDecimal dAmountActual, BigDecimal dAmountTaxed, BigDecimal dAmountTotal, LocalDateTime dFinishedTime, LocalDateTime dOrderTime, BigDecimal dTax, BigDecimal dTaxRate, String sCode, String sCredence, String sSerial, String sStatus, String jConfig, String hCatId, Long rCompanyId, Long rCurrencyId, Long rIncotermId, Long rPartnerId, Long rWhId, Boolean isApproval, Boolean isInvoice, Boolean isActive, String zSigma, String zLanguage, String zCreateBy, LocalDateTime zCreateTime, String zUpdateBy, LocalDateTime zUpdateTime) {
        super(AbsOrders.ABS_ORDERS);

        set(0, pkId);
        set(1, dAmountActual);
        set(2, dAmountTaxed);
        set(3, dAmountTotal);
        set(4, dFinishedTime);
        set(5, dOrderTime);
        set(6, dTax);
        set(7, dTaxRate);
        set(8, sCode);
        set(9, sCredence);
        set(10, sSerial);
        set(11, sStatus);
        set(12, jConfig);
        set(13, hCatId);
        set(14, rCompanyId);
        set(15, rCurrencyId);
        set(16, rIncotermId);
        set(17, rPartnerId);
        set(18, rWhId);
        set(19, isApproval);
        set(20, isInvoice);
        set(21, isActive);
        set(22, zSigma);
        set(23, zLanguage);
        set(24, zCreateBy);
        set(25, zCreateTime);
        set(26, zUpdateBy);
        set(27, zUpdateTime);
    }
}
