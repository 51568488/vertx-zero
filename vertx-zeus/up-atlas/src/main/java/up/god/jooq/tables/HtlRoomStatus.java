/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.HtlRoomStatusRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HtlRoomStatus extends TableImpl<HtlRoomStatusRecord> {

    private static final long serialVersionUID = -268753280;

    /**
     * The reference instance of <code>DB_HTL.HTL_ROOM_STATUS</code>
     */
    public static final HtlRoomStatus HTL_ROOM_STATUS = new HtlRoomStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HtlRoomStatusRecord> getRecordType() {
        return HtlRoomStatusRecord.class;
    }

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<HtlRoomStatusRecord, Long> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.D_DAY</code>. day,D_DAY
     */
    public final TableField<HtlRoomStatusRecord, LocalDate> D_DAY = createField("D_DAY", org.jooq.impl.SQLDataType.LOCALDATE, this, "day,D_DAY");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.S_CODE</code>. code,S_CODE
     */
    public final TableField<HtlRoomStatusRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<HtlRoomStatusRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.RLT_CLEAN_STATUS</code>. 清洁状态,cleanStatus,RLT_CLEAN_STATUS
     */
    public final TableField<HtlRoomStatusRecord, Long> RLT_CLEAN_STATUS = createField("RLT_CLEAN_STATUS", org.jooq.impl.SQLDataType.BIGINT, this, "清洁状态,cleanStatus,RLT_CLEAN_STATUS");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.RLT_OP_STATUS</code>. 操作状态：可操作（空、占用、预离、预抵）、维修、预留、停用、自用,opStatus,RLT_OP_STATUS
     */
    public final TableField<HtlRoomStatusRecord, Long> RLT_OP_STATUS = createField("RLT_OP_STATUS", org.jooq.impl.SQLDataType.BIGINT, this, "操作状态：可操作（空、占用、预离、预抵）、维修、预留、停用、自用,opStatus,RLT_OP_STATUS");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.R_ROOM_ID</code>. roomId,R_ROOM_ID
     */
    public final TableField<HtlRoomStatusRecord, Long> R_ROOM_ID = createField("R_ROOM_ID", org.jooq.impl.SQLDataType.BIGINT, this, "roomId,R_ROOM_ID");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.IS_ARRIVING</code>. 是否预抵,arriving,IS_ARRIVING
     */
    public final TableField<HtlRoomStatusRecord, Boolean> IS_ARRIVING = createField("IS_ARRIVING", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "是否预抵,arriving,IS_ARRIVING");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.IS_LEAVING</code>. 是否预离,leaving,IS_LEAVING
     */
    public final TableField<HtlRoomStatusRecord, Boolean> IS_LEAVING = createField("IS_LEAVING", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "是否预离,leaving,IS_LEAVING");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<HtlRoomStatusRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<HtlRoomStatusRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<HtlRoomStatusRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<HtlRoomStatusRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<HtlRoomStatusRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<HtlRoomStatusRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.HTL_ROOM_STATUS.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<HtlRoomStatusRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.HTL_ROOM_STATUS</code> table reference
     */
    public HtlRoomStatus() {
        this(DSL.name("HTL_ROOM_STATUS"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.HTL_ROOM_STATUS</code> table reference
     */
    public HtlRoomStatus(String alias) {
        this(DSL.name(alias), HTL_ROOM_STATUS);
    }

    /**
     * Create an aliased <code>DB_HTL.HTL_ROOM_STATUS</code> table reference
     */
    public HtlRoomStatus(Name alias) {
        this(alias, HTL_ROOM_STATUS);
    }

    private HtlRoomStatus(Name alias, Table<HtlRoomStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private HtlRoomStatus(Name alias, Table<HtlRoomStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HTL_ROOM_STATUS_PRIMARY, Indexes.HTL_ROOM_STATUS_UK_HTL_ROOM_STATUS_R_ROOM_ID_D_DAY_Z_SIGMA, Indexes.HTL_ROOM_STATUS_UK_HTL_ROOM_STATUS_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HtlRoomStatusRecord, Long> getIdentity() {
        return Keys.IDENTITY_HTL_ROOM_STATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HtlRoomStatusRecord> getPrimaryKey() {
        return Keys.KEY_HTL_ROOM_STATUS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HtlRoomStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<HtlRoomStatusRecord>>asList(Keys.KEY_HTL_ROOM_STATUS_PRIMARY, Keys.KEY_HTL_ROOM_STATUS_UK_HTL_ROOM_STATUS_R_ROOM_ID_D_DAY_Z_SIGMA, Keys.KEY_HTL_ROOM_STATUS_UK_HTL_ROOM_STATUS_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtlRoomStatus as(String alias) {
        return new HtlRoomStatus(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HtlRoomStatus as(Name alias) {
        return new HtlRoomStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HtlRoomStatus rename(String name) {
        return new HtlRoomStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HtlRoomStatus rename(Name name) {
        return new HtlRoomStatus(name, null);
    }
}
