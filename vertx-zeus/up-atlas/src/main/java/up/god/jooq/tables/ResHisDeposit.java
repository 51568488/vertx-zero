/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.ResHisDepositRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResHisDeposit extends TableImpl<ResHisDepositRecord> {

    private static final long serialVersionUID = 1241935412;

    /**
     * The reference instance of <code>DB_HTL.RES_HIS_DEPOSIT</code>
     */
    public static final ResHisDeposit RES_HIS_DEPOSIT = new ResHisDeposit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResHisDepositRecord> getRecordType() {
        return ResHisDepositRecord.class;
    }

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<ResHisDepositRecord, String> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.D_AMOUNT</code>. amount,D_AMOUNT
     */
    public final TableField<ResHisDepositRecord, BigDecimal> D_AMOUNT = createField("D_AMOUNT", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "amount,D_AMOUNT");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.D_DEPOSIT_TIME</code>. depositTime,D_DEPOSIT_TIME
     */
    public final TableField<ResHisDepositRecord, LocalDateTime> D_DEPOSIT_TIME = createField("D_DEPOSIT_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "depositTime,D_DEPOSIT_TIME");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.S_CODE</code>. code,S_CODE
     */
    public final TableField<ResHisDepositRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.S_SERIAL</code>. serial,S_SERIAL
     */
    public final TableField<ResHisDepositRecord, String> S_SERIAL = createField("S_SERIAL", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "serial,S_SERIAL");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<ResHisDepositRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.RLT_DEPOSIT_SOURCE</code>. source,RLT_DEPOSIT_SOURCE
     */
    public final TableField<ResHisDepositRecord, Long> RLT_DEPOSIT_SOURCE = createField("RLT_DEPOSIT_SOURCE", org.jooq.impl.SQLDataType.BIGINT, this, "source,RLT_DEPOSIT_SOURCE");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.RLT_DEPOSIT_TYPE</code>. type,RLT_DEPOSIT_TYPE
     */
    public final TableField<ResHisDepositRecord, Long> RLT_DEPOSIT_TYPE = createField("RLT_DEPOSIT_TYPE", org.jooq.impl.SQLDataType.BIGINT, this, "type,RLT_DEPOSIT_TYPE");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.R_CARD_ID</code>. cardId,R_CARD_ID
     */
    public final TableField<ResHisDepositRecord, String> R_CARD_ID = createField("R_CARD_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "cardId,R_CARD_ID");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.IS_FINISHED</code>. finished,IS_FINISHED
     */
    public final TableField<ResHisDepositRecord, Boolean> IS_FINISHED = createField("IS_FINISHED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "finished,IS_FINISHED");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<ResHisDepositRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<ResHisDepositRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<ResHisDepositRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<ResHisDepositRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<ResHisDepositRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<ResHisDepositRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.RES_HIS_DEPOSIT.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<ResHisDepositRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.RES_HIS_DEPOSIT</code> table reference
     */
    public ResHisDeposit() {
        this(DSL.name("RES_HIS_DEPOSIT"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.RES_HIS_DEPOSIT</code> table reference
     */
    public ResHisDeposit(String alias) {
        this(DSL.name(alias), RES_HIS_DEPOSIT);
    }

    /**
     * Create an aliased <code>DB_HTL.RES_HIS_DEPOSIT</code> table reference
     */
    public ResHisDeposit(Name alias) {
        this(alias, RES_HIS_DEPOSIT);
    }

    private ResHisDeposit(Name alias, Table<ResHisDepositRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResHisDeposit(Name alias, Table<ResHisDepositRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RES_HIS_DEPOSIT_FK_RES_HIS_DEPOSIT_R_CARD_ID, Indexes.RES_HIS_DEPOSIT_PRIMARY, Indexes.RES_HIS_DEPOSIT_UK_RES_HIS_DEPOSIT_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResHisDepositRecord> getPrimaryKey() {
        return Keys.KEY_RES_HIS_DEPOSIT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResHisDepositRecord>> getKeys() {
        return Arrays.<UniqueKey<ResHisDepositRecord>>asList(Keys.KEY_RES_HIS_DEPOSIT_PRIMARY, Keys.KEY_RES_HIS_DEPOSIT_UK_RES_HIS_DEPOSIT_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResHisDeposit as(String alias) {
        return new ResHisDeposit(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResHisDeposit as(Name alias) {
        return new ResHisDeposit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResHisDeposit rename(String name) {
        return new ResHisDeposit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResHisDeposit rename(Name name) {
        return new ResHisDeposit(name, null);
    }
}
