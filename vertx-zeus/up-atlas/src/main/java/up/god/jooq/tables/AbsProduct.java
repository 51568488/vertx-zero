/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.AbsProductRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AbsProduct extends TableImpl<AbsProductRecord> {

    private static final long serialVersionUID = -613850603;

    /**
     * The reference instance of <code>DB_HTL.ABS_PRODUCT</code>
     */
    public static final AbsProduct ABS_PRODUCT = new AbsProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbsProductRecord> getRecordType() {
        return AbsProductRecord.class;
    }

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<AbsProductRecord, Long> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.D_MK_PRICE</code>. 【市场价】无折扣的商品价格,marketPrice,D_MK_PRICE
     */
    public final TableField<AbsProductRecord, BigDecimal> D_MK_PRICE = createField("D_MK_PRICE", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "【市场价】无折扣的商品价格,marketPrice,D_MK_PRICE");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.D_UT_PRICE</code>. 【单价】商品实际单价（订单运算使用该价格）,unitPrice,D_UT_PRICE
     */
    public final TableField<AbsProductRecord, BigDecimal> D_UT_PRICE = createField("D_UT_PRICE", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "【单价】商品实际单价（订单运算使用该价格）,unitPrice,D_UT_PRICE");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.S_NAME</code>. name,S_NAME
     */
    public final TableField<AbsProductRecord, String> S_NAME = createField("S_NAME", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "name,S_NAME");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.S_CODE</code>. code,S_CODE
     */
    public final TableField<AbsProductRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.S_BARCODE</code>. barCode,S_BARCODE
     */
    public final TableField<AbsProductRecord, String> S_BARCODE = createField("S_BARCODE", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "barCode,S_BARCODE");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.S_MANUFACTURER</code>. 制造商,manufacturer,S_MANUFACTURER
     */
    public final TableField<AbsProductRecord, String> S_MANUFACTURER = createField("S_MANUFACTURER", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "制造商,manufacturer,S_MANUFACTURER");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.S_SERIAL</code>. serial,S_SERIAL
     */
    public final TableField<AbsProductRecord, String> S_SERIAL = createField("S_SERIAL", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "serial,S_SERIAL");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<AbsProductRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.H_CAT_ID</code>. category,H_CAT_ID
     */
    public final TableField<AbsProductRecord, String> H_CAT_ID = createField("H_CAT_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "category,H_CAT_ID");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.R_BRAND_ID</code>. brandId,R_BRAND_ID
     */
    public final TableField<AbsProductRecord, Long> R_BRAND_ID = createField("R_BRAND_ID", org.jooq.impl.SQLDataType.BIGINT, this, "brandId,R_BRAND_ID");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<AbsProductRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<AbsProductRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<AbsProductRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<AbsProductRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<AbsProductRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<AbsProductRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.ABS_PRODUCT.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<AbsProductRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.ABS_PRODUCT</code> table reference
     */
    public AbsProduct() {
        this(DSL.name("ABS_PRODUCT"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.ABS_PRODUCT</code> table reference
     */
    public AbsProduct(String alias) {
        this(DSL.name(alias), ABS_PRODUCT);
    }

    /**
     * Create an aliased <code>DB_HTL.ABS_PRODUCT</code> table reference
     */
    public AbsProduct(Name alias) {
        this(alias, ABS_PRODUCT);
    }

    private AbsProduct(Name alias, Table<AbsProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private AbsProduct(Name alias, Table<AbsProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ABS_PRODUCT_FK_ABS_PRODUCT_H_CAT_ID, Indexes.ABS_PRODUCT_FK_ABS_PRODUCT_R_BRAND_ID, Indexes.ABS_PRODUCT_PRIMARY, Indexes.ABS_PRODUCT_UK_ABS_PRODUCT_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AbsProductRecord, Long> getIdentity() {
        return Keys.IDENTITY_ABS_PRODUCT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AbsProductRecord> getPrimaryKey() {
        return Keys.KEY_ABS_PRODUCT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AbsProductRecord>> getKeys() {
        return Arrays.<UniqueKey<AbsProductRecord>>asList(Keys.KEY_ABS_PRODUCT_PRIMARY, Keys.KEY_ABS_PRODUCT_UK_ABS_PRODUCT_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AbsProduct as(String alias) {
        return new AbsProduct(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AbsProduct as(Name alias) {
        return new AbsProduct(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AbsProduct rename(String name) {
        return new AbsProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AbsProduct rename(Name name) {
        return new AbsProduct(name, null);
    }
}
