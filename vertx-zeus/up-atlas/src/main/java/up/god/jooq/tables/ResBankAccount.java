/*
 * This file is generated by jOOQ.
*/
package up.god.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import up.god.jooq.DbHtl;
import up.god.jooq.Indexes;
import up.god.jooq.Keys;
import up.god.jooq.tables.records.ResBankAccountRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResBankAccount extends TableImpl<ResBankAccountRecord> {

    private static final long serialVersionUID = 778290170;

    /**
     * The reference instance of <code>DB_HTL.RES_BANK_ACCOUNT</code>
     */
    public static final ResBankAccount RES_BANK_ACCOUNT = new ResBankAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResBankAccountRecord> getRecordType() {
        return ResBankAccountRecord.class;
    }

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.PK_ID</code>. uniqueId,PK_ID
     */
    public final TableField<ResBankAccountRecord, Long> PK_ID = createField("PK_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "uniqueId,PK_ID");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.S_CODE</code>. code,S_CODE
     */
    public final TableField<ResBankAccountRecord, String> S_CODE = createField("S_CODE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "code,S_CODE");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.S_ACC_NUM</code>. acc,S_ACC_NUM
     */
    public final TableField<ResBankAccountRecord, String> S_ACC_NUM = createField("S_ACC_NUM", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "acc,S_ACC_NUM");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.S_SANITIZED_ACC_NUMBER</code>. sacc,S_SANITIZED_ACC_NUMBER
     */
    public final TableField<ResBankAccountRecord, String> S_SANITIZED_ACC_NUMBER = createField("S_SANITIZED_ACC_NUMBER", org.jooq.impl.SQLDataType.VARCHAR(64), this, "sacc,S_SANITIZED_ACC_NUMBER");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.J_CONFIG</code>. config,J_CONFIG
     */
    public final TableField<ResBankAccountRecord, String> J_CONFIG = createField("J_CONFIG", org.jooq.impl.SQLDataType.CLOB, this, "config,J_CONFIG");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.I_ORDER</code>. order,I_ORDER
     */
    public final TableField<ResBankAccountRecord, Integer> I_ORDER = createField("I_ORDER", org.jooq.impl.SQLDataType.INTEGER, this, "order,I_ORDER");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.RLT_TYPE</code>. type,RLT_TYPE
     */
    public final TableField<ResBankAccountRecord, Long> RLT_TYPE = createField("RLT_TYPE", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "type,RLT_TYPE");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.R_BANK_ID</code>. bankId,R_BANK_ID
     */
    public final TableField<ResBankAccountRecord, Long> R_BANK_ID = createField("R_BANK_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "bankId,R_BANK_ID");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.R_COMPANY_ID</code>. companyId,R_COMPANY_ID
     */
    public final TableField<ResBankAccountRecord, Long> R_COMPANY_ID = createField("R_COMPANY_ID", org.jooq.impl.SQLDataType.BIGINT, this, "companyId,R_COMPANY_ID");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.R_CURRENCY_ID</code>. currencyId,R_CURRENCY_ID
     */
    public final TableField<ResBankAccountRecord, Long> R_CURRENCY_ID = createField("R_CURRENCY_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "currencyId,R_CURRENCY_ID");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.R_MEMBER_ID</code>. memberId,R_MEMBER_ID
     */
    public final TableField<ResBankAccountRecord, String> R_MEMBER_ID = createField("R_MEMBER_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "memberId,R_MEMBER_ID");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.R_PARTNER_ID</code>. partnerId,R_PARTNER_ID
     */
    public final TableField<ResBankAccountRecord, Long> R_PARTNER_ID = createField("R_PARTNER_ID", org.jooq.impl.SQLDataType.BIGINT, this, "partnerId,R_PARTNER_ID");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.IS_ACTIVE</code>. active,IS_ACTIVE
     */
    public final TableField<ResBankAccountRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "active,IS_ACTIVE");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.Z_SIGMA</code>. sigma,Z_SIGMA
     */
    public final TableField<ResBankAccountRecord, String> Z_SIGMA = createField("Z_SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "sigma,Z_SIGMA");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.Z_LANGUAGE</code>. language,Z_LANGUAGE
     */
    public final TableField<ResBankAccountRecord, String> Z_LANGUAGE = createField("Z_LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(8), this, "language,Z_LANGUAGE");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.Z_CREATE_BY</code>. createBy,Z_CREATE_BY
     */
    public final TableField<ResBankAccountRecord, String> Z_CREATE_BY = createField("Z_CREATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "createBy,Z_CREATE_BY");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.Z_CREATE_TIME</code>. createTime,Z_CREATE_TIME
     */
    public final TableField<ResBankAccountRecord, LocalDateTime> Z_CREATE_TIME = createField("Z_CREATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "createTime,Z_CREATE_TIME");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.Z_UPDATE_BY</code>. updateBy,Z_UPDATE_BY
     */
    public final TableField<ResBankAccountRecord, String> Z_UPDATE_BY = createField("Z_UPDATE_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "updateBy,Z_UPDATE_BY");

    /**
     * The column <code>DB_HTL.RES_BANK_ACCOUNT.Z_UPDATE_TIME</code>. updateTime,Z_UPDATE_TIME
     */
    public final TableField<ResBankAccountRecord, LocalDateTime> Z_UPDATE_TIME = createField("Z_UPDATE_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "updateTime,Z_UPDATE_TIME");

    /**
     * Create a <code>DB_HTL.RES_BANK_ACCOUNT</code> table reference
     */
    public ResBankAccount() {
        this(DSL.name("RES_BANK_ACCOUNT"), null);
    }

    /**
     * Create an aliased <code>DB_HTL.RES_BANK_ACCOUNT</code> table reference
     */
    public ResBankAccount(String alias) {
        this(DSL.name(alias), RES_BANK_ACCOUNT);
    }

    /**
     * Create an aliased <code>DB_HTL.RES_BANK_ACCOUNT</code> table reference
     */
    public ResBankAccount(Name alias) {
        this(alias, RES_BANK_ACCOUNT);
    }

    private ResBankAccount(Name alias, Table<ResBankAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResBankAccount(Name alias, Table<ResBankAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbHtl.DB_HTL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RES_BANK_ACCOUNT_FK_RES_BANK_ACCOUNT_R_BANK_ID, Indexes.RES_BANK_ACCOUNT_FK_RES_BANK_ACCOUNT_R_COMPANY_ID, Indexes.RES_BANK_ACCOUNT_FK_RES_BANK_ACCOUNT_R_CURRENCY_ID, Indexes.RES_BANK_ACCOUNT_FK_RES_BANK_ACCOUNT_R_MEMBER_ID, Indexes.RES_BANK_ACCOUNT_FK_RES_BANK_ACCOUNT_R_PARTNER_ID, Indexes.RES_BANK_ACCOUNT_PRIMARY, Indexes.RES_BANK_ACCOUNT_UK_RES_BANK_ACCOUNT_S_ACC_NUM_Z_SIGMA, Indexes.RES_BANK_ACCOUNT_UK_RES_BANK_ACCOUNT_S_CODE_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ResBankAccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_RES_BANK_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResBankAccountRecord> getPrimaryKey() {
        return Keys.KEY_RES_BANK_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResBankAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<ResBankAccountRecord>>asList(Keys.KEY_RES_BANK_ACCOUNT_PRIMARY, Keys.KEY_RES_BANK_ACCOUNT_UK_RES_BANK_ACCOUNT_S_CODE_Z_SIGMA, Keys.KEY_RES_BANK_ACCOUNT_UK_RES_BANK_ACCOUNT_S_ACC_NUM_Z_SIGMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResBankAccount as(String alias) {
        return new ResBankAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResBankAccount as(Name alias) {
        return new ResBankAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResBankAccount rename(String name) {
        return new ResBankAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResBankAccount rename(Name name) {
        return new ResBankAccount(name, null);
    }
}
